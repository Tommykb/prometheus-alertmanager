// Code generated by go-swagger; DO NOT EDIT.

// Copyright Prometheus Team
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package alertgroupinfos

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetAlertGroupInfosParams creates a new GetAlertGroupInfosParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetAlertGroupInfosParams() *GetAlertGroupInfosParams {
	return &GetAlertGroupInfosParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetAlertGroupInfosParamsWithTimeout creates a new GetAlertGroupInfosParams object
// with the ability to set a timeout on a request.
func NewGetAlertGroupInfosParamsWithTimeout(timeout time.Duration) *GetAlertGroupInfosParams {
	return &GetAlertGroupInfosParams{
		timeout: timeout,
	}
}

// NewGetAlertGroupInfosParamsWithContext creates a new GetAlertGroupInfosParams object
// with the ability to set a context for a request.
func NewGetAlertGroupInfosParamsWithContext(ctx context.Context) *GetAlertGroupInfosParams {
	return &GetAlertGroupInfosParams{
		Context: ctx,
	}
}

// NewGetAlertGroupInfosParamsWithHTTPClient creates a new GetAlertGroupInfosParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetAlertGroupInfosParamsWithHTTPClient(client *http.Client) *GetAlertGroupInfosParams {
	return &GetAlertGroupInfosParams{
		HTTPClient: client,
	}
}

/*
GetAlertGroupInfosParams contains all the parameters to send to the API endpoint

	for the get alert group infos operation.

	Typically these are written to a http.Request.
*/
type GetAlertGroupInfosParams struct {

	/* MaxResults.

	   The maximum number of alert groups to return in one getAlertGroupInfos operation.
	*/
	MaxResults *int64

	/* NextToken.

	   The token for the next set of items to return
	*/
	NextToken *string

	/* Receiver.

	   A regex matching receivers to filter alerts by
	*/
	Receiver *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get alert group infos params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAlertGroupInfosParams) WithDefaults() *GetAlertGroupInfosParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get alert group infos params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAlertGroupInfosParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get alert group infos params
func (o *GetAlertGroupInfosParams) WithTimeout(timeout time.Duration) *GetAlertGroupInfosParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get alert group infos params
func (o *GetAlertGroupInfosParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get alert group infos params
func (o *GetAlertGroupInfosParams) WithContext(ctx context.Context) *GetAlertGroupInfosParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get alert group infos params
func (o *GetAlertGroupInfosParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get alert group infos params
func (o *GetAlertGroupInfosParams) WithHTTPClient(client *http.Client) *GetAlertGroupInfosParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get alert group infos params
func (o *GetAlertGroupInfosParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithMaxResults adds the maxResults to the get alert group infos params
func (o *GetAlertGroupInfosParams) WithMaxResults(maxResults *int64) *GetAlertGroupInfosParams {
	o.SetMaxResults(maxResults)
	return o
}

// SetMaxResults adds the maxResults to the get alert group infos params
func (o *GetAlertGroupInfosParams) SetMaxResults(maxResults *int64) {
	o.MaxResults = maxResults
}

// WithNextToken adds the nextToken to the get alert group infos params
func (o *GetAlertGroupInfosParams) WithNextToken(nextToken *string) *GetAlertGroupInfosParams {
	o.SetNextToken(nextToken)
	return o
}

// SetNextToken adds the nextToken to the get alert group infos params
func (o *GetAlertGroupInfosParams) SetNextToken(nextToken *string) {
	o.NextToken = nextToken
}

// WithReceiver adds the receiver to the get alert group infos params
func (o *GetAlertGroupInfosParams) WithReceiver(receiver *string) *GetAlertGroupInfosParams {
	o.SetReceiver(receiver)
	return o
}

// SetReceiver adds the receiver to the get alert group infos params
func (o *GetAlertGroupInfosParams) SetReceiver(receiver *string) {
	o.Receiver = receiver
}

// WriteToRequest writes these params to a swagger request
func (o *GetAlertGroupInfosParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.MaxResults != nil {

		// query param maxResults
		var qrMaxResults int64

		if o.MaxResults != nil {
			qrMaxResults = *o.MaxResults
		}
		qMaxResults := swag.FormatInt64(qrMaxResults)
		if qMaxResults != "" {

			if err := r.SetQueryParam("maxResults", qMaxResults); err != nil {
				return err
			}
		}
	}

	if o.NextToken != nil {

		// query param nextToken
		var qrNextToken string

		if o.NextToken != nil {
			qrNextToken = *o.NextToken
		}
		qNextToken := qrNextToken
		if qNextToken != "" {

			if err := r.SetQueryParam("nextToken", qNextToken); err != nil {
				return err
			}
		}
	}

	if o.Receiver != nil {

		// query param receiver
		var qrReceiver string

		if o.Receiver != nil {
			qrReceiver = *o.Receiver
		}
		qReceiver := qrReceiver
		if qReceiver != "" {

			if err := r.SetQueryParam("receiver", qReceiver); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
