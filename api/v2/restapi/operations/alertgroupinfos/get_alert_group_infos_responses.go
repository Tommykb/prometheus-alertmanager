// Code generated by go-swagger; DO NOT EDIT.

// Copyright Prometheus Team
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package alertgroupinfos

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/prometheus/alertmanager/api/v2/models"
)

// GetAlertGroupInfosOKCode is the HTTP code returned for type GetAlertGroupInfosOK
const GetAlertGroupInfosOKCode int = 200

/*
GetAlertGroupInfosOK Get alert groups info response

swagger:response getAlertGroupInfosOK
*/
type GetAlertGroupInfosOK struct {

	/*
	  In: Body
	*/
	Payload *models.AlertGroupInfos `json:"body,omitempty"`
}

// NewGetAlertGroupInfosOK creates GetAlertGroupInfosOK with default headers values
func NewGetAlertGroupInfosOK() *GetAlertGroupInfosOK {

	return &GetAlertGroupInfosOK{}
}

// WithPayload adds the payload to the get alert group infos o k response
func (o *GetAlertGroupInfosOK) WithPayload(payload *models.AlertGroupInfos) *GetAlertGroupInfosOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get alert group infos o k response
func (o *GetAlertGroupInfosOK) SetPayload(payload *models.AlertGroupInfos) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetAlertGroupInfosOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetAlertGroupInfosBadRequestCode is the HTTP code returned for type GetAlertGroupInfosBadRequest
const GetAlertGroupInfosBadRequestCode int = 400

/*
GetAlertGroupInfosBadRequest Bad request

swagger:response getAlertGroupInfosBadRequest
*/
type GetAlertGroupInfosBadRequest struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewGetAlertGroupInfosBadRequest creates GetAlertGroupInfosBadRequest with default headers values
func NewGetAlertGroupInfosBadRequest() *GetAlertGroupInfosBadRequest {

	return &GetAlertGroupInfosBadRequest{}
}

// WithPayload adds the payload to the get alert group infos bad request response
func (o *GetAlertGroupInfosBadRequest) WithPayload(payload string) *GetAlertGroupInfosBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get alert group infos bad request response
func (o *GetAlertGroupInfosBadRequest) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetAlertGroupInfosBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// GetAlertGroupInfosInternalServerErrorCode is the HTTP code returned for type GetAlertGroupInfosInternalServerError
const GetAlertGroupInfosInternalServerErrorCode int = 500

/*
GetAlertGroupInfosInternalServerError Internal server error

swagger:response getAlertGroupInfosInternalServerError
*/
type GetAlertGroupInfosInternalServerError struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewGetAlertGroupInfosInternalServerError creates GetAlertGroupInfosInternalServerError with default headers values
func NewGetAlertGroupInfosInternalServerError() *GetAlertGroupInfosInternalServerError {

	return &GetAlertGroupInfosInternalServerError{}
}

// WithPayload adds the payload to the get alert group infos internal server error response
func (o *GetAlertGroupInfosInternalServerError) WithPayload(payload string) *GetAlertGroupInfosInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get alert group infos internal server error response
func (o *GetAlertGroupInfosInternalServerError) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetAlertGroupInfosInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}
