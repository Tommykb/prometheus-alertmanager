// Code generated by go-bindata.
// sources:
// template/default.tmpl
// DO NOT EDIT!

package deftmpl

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateDefaultTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x3b\x7b\x6f\xe2\xc6\xf6\xff\xfb\x53\x9c\xba\xfa\xa9\x1b\x09\x30\xc9\xb6\xab\x86\x40\x7e\x62\x89\xb3\xb1\x2e\x98\xc8\x38\xbb\x5d\x55\x55\x35\xd8\x03\x9e\x5d\x7b\xc6\x9d\x19\x43\x68\xca\x77\xbf\x9a\xb1\x79\x38\x40\x42\x56\xbd\x09\xf7\x36\xbb\x6a\x17\x1f\xcf\x79\x3f\xe6\xcc\xc3\x77\x77\x10\xe2\x11\xa1\x18\xcc\xdf\x7f\x47\x31\xe6\x32\x41\x14\x8d\x31\x37\x61\x3e\x6f\xab\xe7\x5e\xfe\x7c\x77\x07\x98\x86\x30\x9f\x1b\x3b\x51\x6e\xbc\xae\xc2\xba\xbb\x83\x9a\x7d\x2b\x31\xa7\x28\xbe\xf1\xba\x30\x9f\x5b\xdf\x5b\x7a\x9c\xf8\x7f\x8e\x03\x4c\x26\x98\xb7\xd4\x20\xaf\x78\xc8\x71\x0a\xea\x65\xf2\x22\x1b\x7e\xc1\x81\x54\x64\x7f\x55\x28\x03\x89\x64\x26\xe0\x2f\x90\xec\x26\x4d\x17\xa8\x64\x04\xf8\x8f\xe5\x4b\x73\x44\x38\xa1\x63\x85\xd3\x50\x38\x5a\x0b\x51\xbb\xd4\x50\xf8\x0b\x62\x4c\xd7\x39\xfe\x06\x6a\xd0\x07\xce\xb2\xb4\x8b\x86\x38\x16\xb5\x01\xe3\x12\x87\xd7\x88\x70\x51\xfb\x88\xe2\x0c\x2b\x86\x5f\x18\xa1\x60\x82\xa2\x0a\x39\xcb\xb1\x84\x37\x8a\x56\xad\xc3\x92\x84\xd1\x1c\xf9\xa8\x80\xad\xd1\x3b\x82\xf9\xfc\xcd\xdd\x1d\x4c\x89\x8c\xca\x83\x6b\x1e\x4e\xd8\x04\x97\xb9\xbb\x28\xc1\xa2\x30\xe3\x36\xee\x4b\xc1\x8f\x96\xbf\x76\xf8\x26\xc4\x22\xe0\x24\x95\x84\x51\xf3\x01\x1b\x4b\x7c\x2b\x73\x3f\xfe\x1e\x13\x21\x8b\xa1\x1c\xd1\x31\x86\x1a\xcc\xe7\xb9\x5c\x0d\x63\x05\xdc\xb4\x93\xb2\x4a\x55\x1b\x52\x89\xaf\x9e\x5a\xb0\x54\xa0\x10\x2c\x67\xde\xa6\x94\x49\xa4\x64\x2a\x91\x5c\x03\x7f\x1b\xdd\x01\xcb\x78\x80\x1b\xb9\x33\x31\xc5\x1c\x49\xc6\xf3\xf0\x33\xb6\x18\xaa\x64\x03\x11\xa3\xe0\x6b\x2d\xc4\x23\x94\xc5\xb2\x26\x89\x8c\x71\x61\x05\x89\x93\x34\x46\xb2\x1c\x8b\xb5\x5d\x26\x2f\xd3\xc9\x84\x4a\x81\x64\x1b\xa9\x72\xa2\xed\x49\x6f\x84\xe2\x78\x88\x82\xaf\x1b\xf4\xb6\x8a\xaf\x88\xc2\x5f\xf0\xd8\xc0\x98\xd0\xaf\x7b\x4b\x90\x72\xac\x82\xc5\xdc\x6f\xf4\x1a\xfd\x07\x0d\xa0\xcb\xc6\x9e\x12\x90\x80\x51\x9c\xb0\x2f\x64\x5f\x19\x36\xc4\x2d\x39\x3e\x22\x69\x10\x21\xb9\x32\x31\x67\xc9\xb7\xbb\xeb\x3e\xb5\x04\x0b\x81\xc6\x4f\x08\xa5\x92\x6c\xa9\xe2\x16\x66\x72\xb6\xa4\xb7\x99\xcf\x4f\x0b\xcf\x4d\x8a\x41\x4c\x30\x95\xdf\xae\xf1\x2e\x8a\xab\x99\xe0\xdb\x9c\xbe\x49\x97\x50\x21\x11\x0d\xb0\xd8\x42\x77\xa3\x80\x3d\x60\x55\x96\x8a\x31\xa6\x04\xff\x6d\x46\xdd\x20\x28\x74\x21\x7a\xba\xfa\x25\x31\x71\x82\x48\xbc\x22\xb9\x9a\x05\x9f\x2c\x5f\x99\x52\x24\x93\x58\x91\x31\x9a\xdf\x5d\xf4\x3b\xfe\xe7\x6b\x1b\x14\x08\xae\x6f\xde\x77\x9d\x0e\x98\x55\xcb\xfa\xf4\xb6\x63\x59\x17\xfe\x05\xfc\x72\xe5\xf7\xba\x70\x5c\xab\x83\xcf\x11\x15\x44\x99\x08\xc5\x96\x65\xbb\x26\x98\x91\x94\x69\xc3\xb2\xa6\xd3\x69\x6d\xfa\xb6\xc6\xf8\xd8\xf2\x3d\xeb\x56\xd1\x3a\x56\xc8\xc5\xcf\xaa\x5c\xc3\xac\x85\x32\x34\xcf\x8d\xe6\x77\xd5\xaa\x31\x90\xb3\x18\x03\xa2\x21\x68\x26\x21\xe6\x64\x82\x43\x50\xf9\x07\x8a\xb4\x68\x58\xd6\x98\xc8\x28\x1b\xd6\x02\x96\x58\x4a\x87\x71\x46\x2d\x4d\x0e\x05\x39\xbd\xaa\x56\xad\xba\x30\x87\x30\x0c\xc3\x8f\x30\xf4\x1c\x1f\xba\x24\xc0\x54\x60\x78\xd3\x73\xfc\x23\xc3\xe8\xb0\x74\xc6\xc9\x38\x92\xf0\x26\x38\x82\x93\xfa\xf1\x8f\xd0\xcb\x29\x1a\xc6\x35\xe6\x09\x11\x82\x30\x0a\x44\x40\x84\x39\x1e\xce\x60\xcc\x11\x95\x38\xac\xc0\x88\x63\x0c\x6c\x04\x41\x84\xf8\x18\x57\x40\x32\x40\x74\x06\x29\xe6\x82\x51\x60\x43\x89\x08\x55\x5d\x05\x82\x80\xa5\x33\x83\x8d\x40\x46\x44\x80\x60\x23\x39\x45\x3c\xd7\x10\x09\xc1\x02\x82\x24\x0e\x21\x64\x41\x96\x60\x9a\x4f\x74\x30\x22\x31\x16\xf0\x46\x46\x18\xcc\x41\x81\x61\x1e\x69\x26\x21\x46\xb1\x41\x28\xa8\x77\x8b\x57\xba\x81\x60\x99\x04\x8e\x85\xe4\x44\x5b\xa1\x02\x84\x06\x71\x16\x2a\x19\x16\xaf\x63\x92\x90\x82\x83\x42\xd7\x8a\x0b\x43\x32\xc8\x04\xae\x68\x39\x2b\x90\xb0\x90\x8c\xd4\xbf\x58\xab\x95\x66\xc3\x98\x88\xa8\x02\x21\x51\xa4\x87\x99\xc4\x15\x10\x0a\xa8\xed\x58\x51\x7a\x58\x8c\x83\xc0\x71\x6c\x04\x2c\x25\x58\x80\xd6\x75\x25\x9d\x1e\xa3\x44\x4f\x95\x41\x65\x61\x22\xa1\x20\xd3\x88\x25\x65\x4d\x88\x30\x46\x19\xa7\x44\x44\x58\xe3\x84\x0c\x04\xd3\x1c\x55\x34\x2b\x88\x1a\x3e\x62\x71\xcc\xa6\x4a\xb5\x80\xd1\x90\x14\x3d\x83\x76\x32\x1a\xaa\xbe\x29\x58\xfa\x95\x32\x49\x82\xdc\xdc\xda\x01\xe9\xca\xab\xc5\x2b\x11\xa1\x38\x86\x21\x2e\x0c\x86\x43\x20\x14\xd0\x9a\x3a\x5c\xb1\x57\x45\x46\x12\x14\x43\xca\xb8\xe6\x77\x5f\xcd\x9a\x61\xf8\x57\x36\x0c\xfa\x97\xfe\xa7\xb6\x67\x83\x33\x80\x6b\xaf\xff\xd1\xb9\xb0\x2f\xc0\x6c\x0f\xc0\x19\x98\x15\xf8\xe4\xf8\x57\xfd\x1b\x1f\x3e\xb5\x3d\xaf\xed\xfa\x9f\xa1\x7f\x09\x6d\xf7\x33\xfc\xcb\x71\x2f\x2a\x60\xff\x72\xed\xd9\x83\x01\xf4\x3d\xc3\xe9\x5d\x77\x1d\xfb\xa2\x02\x8e\xdb\xe9\xde\x5c\x38\xee\x07\x78\x7f\xe3\x83\xdb\xf7\xa1\xeb\xf4\x1c\xdf\xbe\x00\xbf\x0f\x8a\x61\x41\xca\xb1\x07\x8a\x58\xcf\xf6\x3a\x57\x6d\xd7\x6f\xbf\x77\xba\x8e\xff\xb9\x62\x5c\x3a\xbe\xab\x68\x5e\xf6\x3d\x68\xc3\x75\xdb\xf3\x9d\xce\x4d\xb7\xed\xc1\xf5\x8d\x77\xdd\x1f\xd8\xd0\x76\x2f\xc0\xed\xbb\x8e\x7b\xe9\x39\xee\x07\xbb\x67\xbb\x7e\x0d\x1c\x17\xdc\x3e\xd8\x1f\x6d\xd7\x87\xc1\x55\xbb\xdb\x55\xac\x8c\xf6\x8d\x7f\xd5\xf7\x94\x7c\xd0\xe9\x5f\x7f\xf6\x9c\x0f\x57\x3e\x5c\xf5\xbb\x17\xb6\x37\x80\xf7\x36\x74\x9d\xf6\xfb\xae\x9d\xb3\x72\x3f\x43\xa7\xdb\x76\x7a\x15\xb8\x68\xf7\xda\x1f\x6c\x8d\xd5\xf7\xaf\x6c\xcf\x50\xc3\x72\xe9\xe0\xd3\x95\xad\x40\x8a\x5f\xdb\x85\x76\xc7\x77\xfa\xae\x52\xa3\xd3\x77\x7d\xaf\xdd\xf1\x2b\xe0\xf7\x3d\x7f\x89\xfa\xc9\x19\xd8\x15\x68\x7b\xce\x40\x19\xe4\xd2\xeb\xf7\x2a\x86\x32\x67\xff\x52\x0d\x71\x5c\x85\xe7\xda\x39\x15\x65\x6a\x28\x79\xa4\xef\xe9\xe7\x9b\x81\xbd\x24\x08\x17\x76\xbb\xeb\xb8\x1f\x06\x0a\x59\xa9\xb8\x18\x5c\x33\xaa\xd5\x73\xa3\xa9\x4b\xe0\x6d\x12\x53\xd1\xda\x52\xd8\x8e\x4f\x4f\x4f\xf3\x7a\x66\xee\x37\x48\xa8\xe2\xd6\x32\x47\x8c\xca\xea\x08\x25\x24\x9e\x35\xe0\x87\x2b\x1c\x4f\xb0\x24\x01\x02\x17\x67\xf8\x87\x0a\x2c\x01\x15\x68\x73\x82\xe2\x0a\x08\x44\x45\x55\x60\x4e\x46\x67\x30\x64\xb7\x55\x41\xfe\x24\x74\xdc\x80\x21\xe3\x21\xe6\xd5\x21\xbb\x3d\x03\x4d\x54\x90\x3f\x71\x03\x8e\x7f\x4c\x6f\xcf\x20\x41\x7c\x4c\x68\x03\xea\x67\xaa\xb6\x46\x18\x85\x2f\xc9\x3f\xc1\x12\x81\x6a\x7a\x5b\xe6\x84\xe0\xa9\xca\x22\x53\x65\xaf\xc4\x54\xb6\xcc\x29\x09\x65\xd4\x0a\xf1\x84\x04\xb8\xaa\x1f\x5e\xce\x58\x60\x2d\xc4\x55\xce\xac\xe2\x3f\x32\x32\x69\x99\x9d\x5c\xd4\xaa\x3f\x4b\xf1\x9a\xe0\xaa\xc3\xb0\x94\x73\xcf\xf4\x4c\x20\xb0\x6c\xdd\xf8\x97\xd5\x9f\x5f\x58\x7c\xdd\x61\xbf\x9c\xbb\x1f\xea\x45\x9a\x96\x16\xee\xdc\x30\x9a\x96\x0a\x4a\xf5\x63\xc8\xc2\x19\x10\x89\x13\x11\xb0\x14\xb7\x4c\x53\x3f\xc8\x99\xfa\x5d\x64\x94\x08\x22\x9c\x20\x9d\x51\xb6\x9a\xdd\x7b\x8b\x16\xfa\x59\x95\xac\x4e\xf1\xf0\x2b\x91\xd5\xfc\x45\xc2\x98\x8c\x34\x52\x3e\x37\x10\x24\x70\xb8\x1a\xa4\x62\x43\x63\x57\x51\xf8\x25\x13\xb2\x01\x94\x51\x7c\x06\x11\x56\x33\x53\x03\x8e\xeb\xf5\xff\x3b\x83\x98\x50\x5c\x5d\x82\x6a\xef\x70\x72\x06\x3a\x03\xf2\x01\xf0\x1d\x49\x54\xb2\x20\x2a\xcf\x40\x2d\xf2\xc6\x9c\x65\x34\xac\x06\x2c\x66\xbc\x01\xdf\x8f\xde\xa9\xbf\xeb\xe6\x87\x14\x85\xa1\x96\x4a\x45\xc3\x70\xac\x47\xb6\xcc\x62\xa4\xa9\xec\x2d\xd1\xf0\xb9\xc3\x63\x4d\xa5\x3d\xf5\xd8\x2a\x3b\x40\x53\xf2\x17\xac\x63\x00\x4a\x82\x67\xae\xa4\x13\xcc\x15\x91\xb8\x8a\x62\x32\xa6\x0d\x90\x2c\x2d\x1b\x6a\xa2\x5f\xb4\x4c\xc9\x52\xf3\xbc\x69\xc9\x70\x25\x68\x5e\x59\xcd\x77\xf5\xfa\x33\xa7\xca\x56\xa1\x43\x22\xd2\x18\xcd\x1a\x30\x8c\x59\xf0\xb5\x14\xdb\x09\xba\xad\x16\x41\xf2\xae\x5e\x4f\x6f\x4b\x2f\x83\x18\x23\xae\x18\xca\xa8\x04\xdf\x95\x28\x4b\xe3\x00\xca\x24\xbb\x97\x12\x25\x6b\x69\x43\x01\x34\x43\x32\x79\xee\xb0\x2a\xeb\x7b\xdf\x38\x0f\x2b\xb1\x90\x5b\x39\x59\x27\x73\xe1\x67\x65\x09\x13\x02\x1c\xc7\xc5\xe8\x96\x59\xcf\x9f\x45\x8a\x82\xc5\xf3\xb3\x2a\x5a\xbc\xe4\x28\x24\x99\x68\xc0\x5b\x0d\xdb\x52\x00\x46\xa3\x52\x15\xcb\xd1\x1a\x70\x9c\xde\x82\x60\x31\x09\xe1\x7b\x7c\xaa\xfe\x96\x0b\xc3\x68\xb4\x66\x8b\x43\xa8\x0e\x2b\x49\x9e\xaf\x4a\xbc\xdb\x99\x70\x25\xeb\x6a\x94\x69\x31\xd5\xfc\x54\xaf\x9f\x81\x9e\xa2\x8a\xf1\x01\xa6\x12\xf3\x6d\xfe\xd2\xff\xd5\xb5\x53\x36\xfd\x66\xbf\xfb\xe9\xe4\xa4\xb3\x7d\x02\x3a\x51\x71\x6d\x42\x91\x6f\x39\x83\x75\xef\xe5\xb8\xdb\x33\x72\xf1\x67\xb5\x51\xbf\xdc\xa1\x07\xbd\x61\x72\x6f\xaf\x3d\x1f\x73\x04\xc7\x30\x9f\x8b\xe5\x86\x07\x8c\x18\x87\xd5\x66\xf2\x8e\xcd\x7c\x98\xcf\xef\x71\x85\xf5\xad\xe5\xd6\xfa\xc6\x32\x6c\xca\x57\xec\xad\x94\xbc\xbf\x2c\xc2\xcb\x67\xfe\x1a\xa7\xfb\xcc\x66\xab\xe8\x39\xce\xa3\xe7\xa1\xe0\x38\xf8\xe2\xb7\xd3\xec\x87\x15\x04\x87\x1e\x0a\x75\xa8\x2f\x8a\xc9\x43\xe1\x50\xa8\x81\x20\xe2\x78\xd4\x32\xf7\xd9\x66\x7d\xe6\x78\x58\x54\xcd\xcb\xcb\xcb\xa2\xfa\x86\x38\x60\x5c\x6f\xca\x2d\xd6\x07\xa5\x15\xc1\x89\x5a\x0f\x94\x0a\xf7\x90\xc5\xe1\xf6\xca\x1d\x64\x5c\x28\xea\x29\x23\x39\x60\xd9\x51\x10\xaa\x89\x16\x8d\xc5\xbd\x0a\xff\x93\x12\x4c\xd3\xd3\xbb\xa8\x23\xc6\x93\x06\x04\x28\x25\x12\xc5\xe4\x4f\xbc\xb5\xea\xbf\xfd\xf1\x67\x1c\xa2\x2d\x13\xf6\xc6\x88\x02\xac\xad\xdc\xc8\x67\xf2\x25\x70\xd9\xbe\xa5\xb7\x85\x7b\xcf\x3f\x12\x3c\x05\x42\xe1\xd1\x63\x87\xa6\x85\xb6\xc6\xf0\xbd\xc2\xbb\xbd\xfc\xe6\x7f\xb6\xce\x20\xc5\x71\xf0\x11\xd4\xb7\xcd\x0a\xaf\x29\xfb\x9f\x49\x59\x21\x39\xa3\xe3\x97\x33\xed\xaf\xbb\xef\x03\xfc\x06\x39\xa0\x69\xe5\x42\xfe\x0d\x51\xb7\xa5\x61\x28\xde\x2c\x0e\xbd\x4b\x92\xbc\xc6\xe1\x3f\x26\x0e\xf3\xde\x74\x19\x6a\xcd\xe1\xcb\xb9\x19\xac\xed\x36\x7a\xe4\xb6\xc7\xee\x2b\x19\x2f\xac\xcc\xee\xbc\x83\x2d\x73\xc1\xea\xd6\x49\x3e\x13\xbc\x78\x64\xac\x49\x74\x28\xe1\xf1\xa8\x45\x1f\xbd\xc2\xf3\x5f\x1a\x2c\xeb\x1d\xe6\xfd\x3b\x45\x2f\xd4\x50\x2e\xda\xad\x8d\x9e\x32\xa3\x21\xe6\xaa\xfb\x2b\x87\x53\x7e\x2b\x4a\x35\x51\x87\x57\x63\xbe\x6d\x36\xdd\xb3\xbd\xf3\xb0\x60\xf1\x04\x87\x3b\x1a\xbc\xd7\xae\xf0\x80\x66\xe3\x83\x8b\x4c\x80\x66\x74\x80\x32\x1d\x9c\x9d\x9e\x92\xc1\x0f\x75\xc4\xaf\x89\xf5\xbf\xd9\xe6\xae\x2f\xb7\x16\x05\x79\x6d\xc1\xb5\x00\xbd\xc0\x92\x6b\x29\xcd\x6b\x34\xfe\x63\xa2\xf1\x75\xd1\xf5\xba\xe8\x7a\x5d\x74\x1d\x7a\xb0\xbc\x2e\xba\x0e\xa6\x65\xdb\xe5\xa8\xa6\xa5\xcf\xe3\xce\x9f\x70\x14\xba\x44\x59\x41\x9e\xfd\x2a\x46\xe9\x6e\xd2\xda\x55\x93\x95\xa3\x4f\x4f\x4f\x1f\x3a\xe1\x2e\x9f\xec\x6e\x1e\x49\x1e\x46\xd3\x70\x48\xed\xcb\x73\xb6\x2e\x27\x3b\x5b\x97\xad\x87\x68\x8f\xb9\x7c\xad\xb7\xb9\x77\xb1\xa1\x7c\x0d\x6b\xbd\x5c\x95\xbf\x7a\x7c\xbe\x80\x38\x59\xaf\x56\x5a\xa3\xbd\x4b\x15\xa6\x12\x86\xb3\xfd\xce\xe1\x36\x6b\xc7\xc6\x7d\x87\xfb\x95\xa1\x69\x85\x64\x72\x9e\xff\xdf\x28\x97\x89\x43\x6b\x6b\x77\xdc\xaf\xcb\x55\x5c\xd5\xaf\xa6\x35\x64\xe1\x4c\x41\x22\x99\xc4\xe7\x86\xb1\xfd\xb3\xca\x34\x13\x11\x9b\x60\xfe\x37\x7c\x55\xb8\x41\xaa\xfc\x5d\x59\xf1\x45\xe9\x8e\x46\x60\xeb\x27\xa4\xc6\x1e\x9b\x5f\xc5\x65\x9c\x1c\xa6\xbf\xd4\x7c\xf8\x93\xab\x8d\xb3\xac\x92\x2e\x8f\xef\xd0\x15\xfc\x16\xd0\xfd\x39\xae\x2f\xe5\x4a\x3c\xf7\xb0\x64\xc6\xe3\xa7\x7f\xa8\xf5\xef\x00\x00\x00\xff\xff\x42\x9e\x57\x2f\x33\x3d\x00\x00")

func templateDefaultTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateDefaultTmpl,
		"template/default.tmpl",
	)
}

func templateDefaultTmpl() (*asset, error) {
	bytes, err := templateDefaultTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/default.tmpl", size: 15667, mode: os.FileMode(420), modTime: time.Unix(1476382594, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/default.tmpl": templateDefaultTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"default.tmpl": &bintree{templateDefaultTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

