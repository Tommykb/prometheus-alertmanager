// Code generated by go-bindata.
// sources:
// template/default.tmpl
// DO NOT EDIT!

package deftmpl

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateDefaultTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x1b\xed\x6e\xdb\x38\xf2\xbf\x9e\x62\x56\x8b\xc3\x36\x80\x6d\x39\xe9\xb6\xd8\x3a\x76\x0e\xae\xa3\x34\xc2\x39\x76\x60\x2b\xed\x16\x8b\x45\x40\x4b\x63\x9b\xad\x44\x6a\x49\x2a\x89\x37\xeb\x77\x3f\x90\x92\x3f\x14\xdb\x89\xd3\xeb\x25\xbe\xdb\x24\x68\x23\x51\xf3\x3d\xc3\x99\xa1\x48\xdd\xde\x42\x88\x43\xca\x10\xec\xcb\x4b\x12\xa1\x50\x31\x61\x64\x84\xc2\x86\xe9\xb4\xa9\xef\xcf\xb2\xfb\xdb\x5b\x40\x16\xc2\x74\x6a\x6d\x44\xb9\xe8\xb5\x35\xd6\xed\x2d\x54\xdc\x1b\x85\x82\x91\xe8\xa2\xd7\x86\xe9\xd4\xf9\xd1\x31\x70\xf2\x9f\x02\x03\xa4\x57\x28\x1a\x1a\xa8\x97\xdf\x64\x38\x39\xf5\x22\x79\x99\x0e\xbe\x60\xa0\x34\xd9\xdf\x34\x4a\x5f\x11\x95\x4a\xf8\x0b\x14\xbf\x48\x92\x19\x2a\x1d\x02\xfe\x31\x7f\x68\x0f\xa9\xa0\x6c\xa4\x71\x6a\x1a\xc7\x68\x21\x2b\x27\x66\x14\xfe\x82\x08\xd9\x32\xc7\xdf\x41\x03\x7d\x10\x3c\x4d\xda\x64\x80\x91\xac\xf4\xb9\x50\x18\x9e\x13\x2a\x64\xe5\x23\x89\x52\xd4\x0c\xbf\x70\xca\xc0\x06\x4d\x15\x32\x96\x23\x05\xaf\x34\xad\x4a\x8b\xc7\x31\x67\x19\xf2\x5e\x3e\xb6\x44\x6f\x0f\xa6\xd3\x57\xb7\xb7\x70\x4d\xd5\xb8\x08\x5c\xe9\x61\xcc\xaf\xb0\xc8\xbd\x43\x62\x94\xb9\x19\xd7\x71\x9f\x0b\xbe\x37\xbf\xda\xe0\x9b\x10\x65\x20\x68\xa2\x28\x67\xf6\x3d\x36\x56\x78\xa3\x32\x3f\x5e\x46\x54\xaa\x1c\x54\x10\x36\x42\xa8\xc0\x74\x9a\xc9\x55\xb3\x16\x83\xab\x76\xd2\x56\x29\x1b\x43\x6a\xf1\xf5\x5d\x03\xe6\x0a\xe4\x82\x65\xcc\x9b\x8c\x71\x45\xb4\x4c\x05\x92\x4b\xc3\xdf\x46\xb7\xcf\x53\x11\x60\x2d\x73\x26\x32\x14\x44\x71\x91\x85\x9f\xb5\xc6\x50\x05\x1b\xc8\x88\x04\x5f\x2b\x21\x0e\x49\x1a\xa9\x8a\xa2\x2a\xc2\xdc\x0a\x0a\xe3\x24\x22\xaa\x18\x8b\x95\x4d\x26\x2f\xd2\x49\xa5\x9e\x02\xf1\x3a\x52\xc5\x89\xb6\x25\xbd\x21\x89\xa2\x01\x09\xbe\xae\xd0\x5b\x2b\xbe\x26\x0a\x7f\xc1\x43\x80\x11\x65\x5f\xb7\x96\x20\x11\xa8\x83\xc5\xde\x0e\x7a\x89\xfe\xbd\x06\x30\x69\x63\x4b\x09\x68\xc0\x19\xc6\xfc\x0b\xdd\x52\x06\x0d\x9f\x8a\x68\x5b\x89\x57\x94\x5b\x86\x55\x48\x62\x39\x87\x0d\x38\x9b\x81\x8f\x95\x4a\x6a\x8e\x23\x83\x31\xc6\xa4\xc2\xc5\xc8\xc1\x1b\x85\x4c\xea\x60\x5e\xcb\xb5\x48\x49\x4d\x12\x13\x23\x67\x28\x25\x19\x61\x8b\x88\x70\x1b\xac\xa5\x28\x7d\x10\x76\xa1\xd7\xe3\x02\xba\x48\x26\x15\xf4\x3f\x72\xe5\x0a\xb5\x99\x5c\x1f\x29\x5e\x83\x49\xd3\xdb\xe1\x71\xa9\xb1\xf2\x81\x6d\xf4\x1f\x63\x8c\x01\x8f\xb8\xb0\xe7\x05\x63\x9e\xbd\x0b\xe5\x61\x0f\xaa\x30\x9d\x9e\xbc\x7e\x73\x70\xf0\x66\x39\x6b\xac\x41\xe8\xa1\xe4\xd1\x15\x86\x19\xca\x2f\xfb\xef\xdf\x57\xdf\x3c\x94\x68\xc6\x34\x09\xc6\x44\x2d\xa6\xb4\xe0\xf1\xb7\xa7\x87\xbb\xd4\xe2\x2c\x80\xb6\xf7\x74\x41\xb6\x44\x73\x0b\x53\x35\x99\xd3\x5b\xad\x1f\x8f\x8b\x9e\x55\x8a\x41\x44\x91\xad\x0b\xc5\x2d\x35\xde\x44\x71\xd1\x79\x7c\x5b\x64\xae\xd2\xa5\x4c\x2a\xc2\x02\x94\x6b\xe8\xae\x14\xcc\x7b\xac\xca\x13\x39\x42\x46\xf1\xdb\x9d\x74\x1f\xb1\x55\x0f\xe5\xfd\xc5\x86\x72\xba\xb6\xa1\xb0\x1e\x9a\x10\xe5\xe9\xd4\xca\x06\x21\x1b\x34\x85\xfb\x7e\x8b\x14\x9b\x2e\xc3\xa4\xbc\xa4\xd1\x03\xf3\x69\x89\xe3\x6c\x78\x7b\x9e\x33\x8c\x15\xae\xe5\x6d\x4c\x2a\x4d\x1f\xf1\xf8\x68\x2a\x78\xfd\x8a\x06\x8a\x0b\x9e\x2c\x52\x90\x54\x44\xe1\x65\xd1\xf9\x2f\xbe\x7a\x9c\xaf\x56\xad\x8a\x4c\x51\x35\xb9\x0c\xa9\x4c\x22\x32\xb9\xdc\xd0\x6d\x3d\x3c\xb1\x56\x29\xc7\x9c\x51\xc5\xb5\x41\x2e\x15\xe7\xd1\x23\x53\xd6\x32\x6d\x8c\x09\x8d\x16\x71\xb0\x58\xd0\x3c\x5a\xca\x22\xa5\xb1\x8a\x8d\x58\x56\xfd\x87\xe3\x6e\xcb\xff\x7c\xee\x82\x1e\x82\xf3\x8b\xf7\x6d\xaf\x05\x76\xd9\x71\x3e\xbd\x6e\x39\xce\xb1\x7f\x0c\xbf\x9e\xfa\x67\x6d\xd8\xaf\x54\xc1\x17\x84\x49\xaa\x83\x8d\x44\x8e\xe3\x76\x6c\xb0\xf3\xf6\xe5\xfa\xfa\xba\x72\xfd\xda\xb4\x2f\x7e\xcf\xb9\xd1\xb4\xf6\x35\x72\x7e\x59\x56\x4b\x98\x95\x50\x85\xf6\x91\x55\xff\xa1\x5c\xb6\xfa\x6a\x12\x21\x10\x16\x82\x61\x12\xa2\xa0\xda\xa1\xba\xb4\x81\x26\x2d\x6b\x8e\x33\xa2\x6a\x9c\x0e\x2a\x01\x8f\x1d\xad\xc3\x28\x65\x8e\x21\x47\x82\x8c\x5e\xd9\xa8\x56\x9e\x99\x43\x5a\x96\xe5\x8f\x11\xce\x3c\x1f\xda\x34\x40\x26\x11\x5e\x9d\x79\xfe\x9e\x65\xb5\x78\x32\x11\x74\x34\x56\xf0\x2a\xd8\x83\x83\xea\xfe\xcf\x70\x96\x51\xb4\xac\x73\x14\x31\x95\xba\xed\x02\x2a\x61\x8c\x02\x07\x13\x18\x09\xc2\x14\x86\x25\x18\x0a\x44\xe0\x43\x08\xc6\x44\x8c\xb0\x04\x8a\x03\x61\x13\x48\x50\x48\xce\x80\x0f\x14\xa1\x4c\xc7\x3f\x81\x80\x27\x13\x8b\x0f\x41\x8d\xa9\x04\xc9\x87\xea\x9a\x88\x4c\x43\x22\x25\x0f\x28\x51\x18\x42\xc8\x83\x34\x46\x96\x4d\x5c\x18\xd2\x08\x25\xbc\x52\x63\x04\xbb\x9f\x63\xd8\x7b\x86\x49\x88\x24\xb2\x28\x03\xfd\x6c\xf6\xc8\xac\x05\x79\xaa\x40\xa0\x54\x82\x1a\x2b\x94\x80\xb2\x20\x4a\x43\x2d\xc3\xec\x71\x44\x63\x9a\x73\xd0\xe8\x46\x71\x69\x29\x0e\xa9\xc4\x92\x91\xb3\x04\x31\x0f\xe9\x50\xff\x45\xa3\x56\x92\x0e\x22\x2a\xc7\x25\x08\xa9\x26\x3d\x48\x15\x96\x40\xea\x41\x63\xc7\x92\xd6\xc3\xe1\x02\x24\x46\x91\x15\xf0\x84\xa2\x04\xa3\xeb\x42\x3a\x03\xa3\x45\x4f\xb4\x41\x55\x6e\x22\xa9\x47\xae\xc7\x3c\x2e\x6a\x42\xa5\x35\x4c\x05\xa3\x72\x8c\x06\x27\xe4\x20\xb9\xe1\xa8\xa3\x59\x8f\x68\xf0\x21\x8f\x22\x7e\xad\x55\x0b\x38\x0b\x69\xbe\xfc\x33\x4e\x26\x03\xbd\x04\x0e\xe6\x7e\x65\x5c\xd1\x20\x33\xb7\x71\x40\xb2\xf0\x6a\xfe\x48\x8e\x49\x14\xc1\x00\x73\x83\x61\x08\x94\x01\x59\x52\x47\x68\xf6\xba\x7e\x2b\x4a\x22\x48\xb8\x30\xfc\xee\xaa\x59\xb1\x2c\xff\xd4\x85\x7e\xf7\xc4\xff\xd4\xec\xb9\xe0\xf5\xe1\xbc\xd7\xfd\xe8\x1d\xbb\xc7\x60\x37\xfb\xe0\xf5\xed\x12\x7c\xf2\xfc\xd3\xee\x85\x0f\x9f\x9a\xbd\x5e\xb3\xe3\x7f\x86\xee\x09\x34\x3b\x9f\xe1\x5f\x5e\xe7\xb8\x04\xee\xaf\xe7\x3d\xb7\xdf\x87\x6e\xcf\xf2\xce\xce\xdb\x9e\x7b\x5c\x02\xaf\xd3\x6a\x5f\x1c\x7b\x9d\x0f\xf0\xfe\xc2\x87\x4e\xd7\x87\xb6\x77\xe6\xf9\xee\x31\xf8\x5d\xd0\x0c\x73\x52\x9e\xdb\xd7\xc4\xce\xdc\x5e\xeb\xb4\xd9\xf1\x9b\xef\xbd\xb6\xe7\x7f\x2e\x59\x27\x9e\xdf\xd1\x34\x4f\xba\x3d\x68\xc2\x79\xb3\xe7\x7b\xad\x8b\x76\xb3\x07\xe7\x17\xbd\xf3\x6e\xdf\x85\x66\xe7\x18\x3a\xdd\x8e\xd7\x39\xe9\x79\x9d\x0f\xee\x99\xdb\xf1\x2b\xe0\x75\xa0\xd3\x05\xf7\xa3\xdb\xf1\xa1\x7f\xda\x6c\xb7\x35\x2b\xab\x79\xe1\x9f\x76\x7b\x5a\x3e\x68\x75\xcf\x3f\xf7\xbc\x0f\xa7\x3e\x9c\x76\xdb\xc7\x6e\xaf\x0f\xef\x5d\x68\x7b\xcd\xf7\x6d\x37\x63\xd5\xf9\x0c\xad\x76\xd3\x3b\x2b\xc1\x71\xf3\xac\xf9\xc1\x35\x58\x5d\xff\xd4\xed\x59\x1a\x2c\x93\x0e\x3e\x9d\xba\x7a\x48\xf3\x6b\x76\xa0\xd9\xf2\xbd\x6e\x47\xab\xd1\xea\x76\xfc\x5e\xb3\xe5\x97\xc0\xef\xf6\xfc\x39\xea\x27\xaf\xef\x96\xa0\xd9\xf3\xfa\xda\x20\x27\xbd\xee\x59\xc9\xd2\xe6\xec\x9e\x68\x10\xaf\xa3\xf1\x3a\x6e\x46\x45\x9b\x1a\x0a\x1e\xe9\xf6\xcc\xfd\x45\xdf\x9d\x13\x84\x63\xb7\xd9\xf6\x3a\x1f\xfa\x1a\x59\xab\x38\x03\xae\x58\xe5\xf2\x91\x55\x37\x29\xf0\x26\x8e\x98\x6c\xac\x49\x6c\xfb\xef\xde\xbd\xcb\xf2\x99\xbd\x1d\x90\xd4\xc9\xad\x61\x0f\x39\x53\xe5\x21\x89\x69\x34\xa9\xc1\x4f\xa7\x18\x5d\xa1\xa2\x01\x81\x0e\xa6\xf8\x53\x09\xe6\x03\x25\x68\x0a\x4a\xa2\x12\x48\xc2\x64\x59\xa2\xa0\xc3\x43\x18\xf0\x9b\xb2\xa4\x7f\xea\x5a\x0c\x03\x2e\x42\x14\xe5\x01\xbf\x39\x04\x43\x54\xd2\x3f\xb1\x06\xfb\x3f\x27\x37\x87\x10\x13\x31\xa2\xac\x06\xd5\x43\x9d\x5b\xc7\x48\xc2\xe7\xe4\x1f\xa3\x22\xa0\x2b\x6a\xc3\xbe\xa2\x78\xad\x67\x91\x0d\x66\xd5\xcb\x54\xc3\xbe\xa6\xa1\x1a\x37\x42\xbc\xa2\x01\x96\xcd\xcd\xf3\x19\x0b\x9c\x99\xb8\xda\x99\x65\xfc\x23\xa5\x57\x0d\xbb\x95\x89\x5a\xf6\xcd\xf2\x7a\x2e\xb8\x6e\x45\x1c\xed\xdc\x43\x53\x09\x24\xaa\xc6\x85\x7f\x52\xfe\xe5\x99\xc5\x37\xcb\xf9\xe7\x73\xf7\x7d\xbd\x48\xdd\x31\xc2\x1d\x59\x56\xdd\xd1\x41\xa9\x2f\x06\x3c\x9c\x00\x55\x18\xcb\x80\x27\xd8\xb0\x6d\x73\xa3\x26\xfa\x7a\xf5\x75\x88\xab\xab\xfb\xd9\xac\xf7\x7d\x52\x25\xcb\xd7\x38\xf8\x4a\x55\x39\x7b\x10\x73\xae\xc6\x06\x29\xab\x0d\x94\x48\x0c\x17\x40\x3a\x36\x0c\x76\x99\x84\x5f\x52\xa9\x6a\xc0\x38\xc3\x43\x18\xa3\xae\x4c\x35\xd8\xaf\x56\xff\x71\x08\x11\x65\x58\x9e\x0f\x55\xde\x62\x7c\x08\x66\x06\x64\x00\xf0\x03\x8d\xf5\x64\x21\x4c\x1d\xc2\x80\x04\x5f\x47\x82\xa7\x2c\x2c\x9b\xf7\x0f\x35\xf8\x71\xf8\x56\xff\x2e\x9b\x1f\x12\x12\x86\x46\x2a\x1d\x0d\x83\x91\x81\x6c\xd8\x39\xa4\xad\xed\xad\xc8\xe0\xa9\xc3\x63\x49\xa5\x2d\xf5\x58\x2b\x3b\x40\x5d\x89\x67\xcc\x63\x00\x5a\x82\x27\xce\xa4\x57\x28\x34\x91\xa8\x4c\x22\x3a\x62\x35\x50\x3c\x29\x1a\xea\xca\x3c\x68\xd8\x8a\x27\xf6\x51\xdd\x51\xe1\x42\xd0\x2c\xb3\xda\x6f\xab\xd5\x27\x9e\x2a\x6b\x85\xce\x97\x56\x35\x18\x44\x3c\xf8\x5a\x88\xed\x98\xdc\x94\xf3\x20\x79\x5b\xad\x26\x37\x85\x87\x41\x84\x44\x68\x86\x6a\x5c\x18\xdf\x34\x51\xe6\xc6\x01\x92\x2a\x7e\x67\x4a\x14\xac\x65\x0c\x05\x50\x0f\xe9\xd5\x53\x87\x55\x51\xdf\xbb\xc6\xb9\x5f\x89\x99\xdc\xda\xc9\x66\x32\xe7\x7e\xd6\x96\xb0\x21\xc0\x28\xca\xa1\x1b\x76\x35\xbb\x97\x09\x09\x66\xf7\x4f\xaa\x68\xfe\x50\x90\x90\xa6\xb2\x06\xaf\xcd\xd8\x9a\x04\x30\x1c\x16\xb2\x58\x86\x56\x83\xfd\xe4\x06\x24\x8f\x68\x08\x3f\xe2\x3b\xfd\x5b\x4c\x0c\xc3\xe1\x92\x2d\x76\x21\x3b\x2c\x24\x79\xba\x2c\xf1\x76\xe3\x84\x2b\x58\xd7\xa0\x5c\xe7\xa5\xe6\x4d\xb5\x7a\x08\xa6\x44\xe5\xf0\x01\x32\x85\x62\x9d\xbf\xcc\xbf\xaa\x71\xca\xaa\xdf\xdc\xb7\x6f\x0e\x0e\x5a\xeb\x0b\xd0\x81\x8e\x6b\x1b\xf2\xf9\x96\x31\x58\xf6\x5e\x86\xbb\x7e\x46\xce\x7e\x16\x7b\xae\xf3\xcd\x56\x20\xf9\xcb\xfd\xd5\x77\x49\x7b\xb0\x0f\xd3\xe9\x62\x9f\x04\x86\x5c\xc0\x62\x5f\x70\xc3\xbe\x2c\x4c\xa7\x77\xb8\xc2\xf2\x2e\x61\xa3\xb0\x47\xb8\x02\x96\xbf\x5a\x29\x38\x7f\x9e\x83\xe7\xf7\xe2\x25\x4c\xb7\x29\x66\x8b\xe0\xd9\xcf\x82\xe7\xbe\xd8\xd8\xf9\xdc\xb7\xd1\xec\xbb\x15\x04\xbb\x1e\x0a\x55\xa8\xce\x72\xc9\x7d\xe1\x90\xab\x41\x60\x2c\x70\xd8\xb0\xb7\x79\xe3\xfe\xc4\xf1\x30\x4b\x9a\x27\x27\x27\x79\xf2\x0d\x31\xe0\xc2\xbc\x93\x9b\x2d\x0f\x0a\x0b\x82\x03\xbd\x1c\x28\xe4\xed\x01\x8f\xc2\xf5\x89\x3b\x48\x85\xd4\xd4\x13\x4e\xb3\x81\x79\x43\x41\x99\x21\x9a\xf7\x15\x77\x12\xfc\x1b\x2d\x98\xa1\x67\x5e\xa2\x0e\xb9\x88\x6b\x10\x90\x84\x2a\x12\xd1\x3f\x71\x6d\xd2\x7f\xfd\xf3\x2f\x18\x92\x35\xf5\x7a\x05\x22\x1f\x36\x56\xae\x65\x85\x7c\x3e\x38\xef\xde\x92\x9b\xdc\xbd\x47\x66\xef\x96\x32\x78\xf0\xed\x78\xdd\x21\x6b\x63\xf8\x4e\xe2\x5d\x9f\x7e\xb3\x9f\x87\x77\x6e\x5f\xa6\xec\x13\x4d\x59\xa9\x04\x67\xa3\xe7\x33\xed\x6f\x9b\x4f\x76\xfd\x9e\xef\x7c\xd5\x9d\x4c\xc8\xef\x10\x75\x6b\x1a\x86\xfc\xc9\xec\xf8\xd2\xdd\x2d\xb4\x97\x38\xfc\x7b\xc4\x61\xd6\x9a\xce\x43\xad\x3e\x78\x3e\x37\x83\xb3\xde\x46\x0f\x9c\xdb\xdb\x7c\xb8\xee\x99\x95\xd9\x3c\xef\x60\x4d\x2d\x58\x6c\xa2\x67\x95\xe0\xd9\x23\x63\x49\xa2\x5d\x09\x8f\x07\x2d\xfa\xe0\x61\xcc\xff\xd1\x60\x59\xee\x30\xef\x9e\x0e\x7d\xa6\x86\x72\xd6\x6e\xad\xf4\x94\x29\x0b\x51\xe8\xee\xaf\x18\x4e\xd9\xf9\x56\xdd\x44\xed\x5e\x8e\xf9\xb6\x6a\xba\x65\x7b\x57\x3c\x67\xb7\x86\xfb\x4b\x57\xb8\x33\xd5\x78\xe7\x22\x13\xa0\x3e\xde\x41\x99\x76\xce\x4e\x8f\x99\xc1\xf7\x75\xc4\x2f\x13\xeb\xff\xb3\xcd\x5d\x5e\x6e\xcd\xcf\xec\x2d\x16\x5c\xb3\xa1\x67\x58\x72\x2d\x9f\x20\x7c\x89\xc6\xbf\x47\x34\xbe\x2c\xba\x5e\x16\x5d\x2f\x8b\xae\x5d\x0f\x96\x97\x45\xd7\xce\xb4\x6c\x9b\x1c\x55\x77\xcc\x7e\xdc\xd1\x23\xb6\x42\xe7\x28\x8b\x91\x27\x3f\x89\x51\x38\x9a\xb4\x74\xd2\x64\xe1\xe8\x77\xef\xde\xdd\xb7\xc1\x5d\xdc\xd9\x5d\xdd\x92\xdc\x8d\xa6\x61\x97\xda\x97\xa7\x6c\x5d\x0e\x36\xb6\x2e\x6b\x37\xd1\x1e\x72\xf9\x52\x6f\x73\xe7\x5c\x43\xf1\x14\xd6\x72\xba\x2a\x7e\xbf\xfe\x74\x01\x71\xb0\x9c\xad\x8c\x46\x5b\xa7\x2a\x64\x0a\x06\x93\xed\xf6\xe1\x56\x73\xc7\xca\x79\x87\xbb\x99\xa1\xee\x84\xf4\xea\x28\xfb\xdf\x2a\xa6\x89\x5d\x6b\x6b\x37\x1c\xaf\xcb\x54\x5c\xe4\xaf\xba\x33\xe0\xe1\x44\x8f\x8c\x55\x1c\x1d\x59\xd6\xfa\xef\x77\x92\x54\x8e\xf9\x15\x8a\xef\xf0\x7d\xf8\x0a\xa9\xff\xfe\xf7\x60\xdf\xe7\x73\xb0\xed\xbf\x06\xfb\x7e\x1f\x83\x2d\xf1\xdc\xc2\x92\x8b\x8f\xbc\x1f\xf1\xcd\xde\xbf\x03\x00\x00\xff\xff\x7d\xf9\xda\x83\xfd\x42\x00\x00")

func templateDefaultTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateDefaultTmpl,
		"template/default.tmpl",
	)
}

func templateDefaultTmpl() (*asset, error) {
	bytes, err := templateDefaultTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/default.tmpl", size: 17149, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/default.tmpl": templateDefaultTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"default.tmpl": &bintree{templateDefaultTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

