// Code generated by go-bindata.
// sources:
// template/default.tmpl
// DO NOT EDIT!

package deftmpl

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateDefaultTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x3b\x6b\x6f\xdb\x36\xbb\xdf\xf5\x2b\x9e\x69\x38\x58\x03\x58\x96\xd3\x6e\xc5\xe2\xd8\x39\x70\x1d\xa5\x11\x8e\x23\x07\xb2\xd2\xae\x18\x86\x80\x96\x68\x9b\xad\x44\x6a\x24\x95\xc4\xcb\xfc\xdf\x0f\x48\xc9\x17\xc5\x72\xe2\x04\x5d\xe2\xf7\x5d\x5a\x6c\xb5\x28\x3e\xf7\x2b\x45\xf2\xf6\x16\x22\x3c\x22\x14\x83\x79\x79\x89\x62\xcc\x65\x82\x28\x1a\x63\x6e\xc2\x6c\xd6\x51\xcf\x67\xf9\xf3\xed\x2d\x60\x1a\xc1\x6c\x66\x6c\x04\xb9\xf0\x7b\x0a\xea\xf6\x16\xea\xce\x8d\xc4\x9c\xa2\xf8\xc2\xef\xc1\x6c\x66\xff\x68\xeb\x79\xe2\x7f\x39\x0e\x31\xb9\xc2\xbc\xad\x26\xf9\xc5\x43\x0e\x53\x60\x2f\xa3\x17\xd9\xf0\x2b\x0e\xa5\x42\xfb\xbb\x02\x19\x48\x24\x33\x01\x7f\x83\x64\x17\x69\x3a\x07\x25\x23\xc0\x7f\x2e\x5e\x9a\x23\xc2\x09\x1d\x2b\x98\xa6\x82\xd1\x52\x88\xfa\x89\x1e\x85\xbf\x21\xc6\x74\x95\xe2\x1f\xa0\x26\x7d\xe4\x2c\x4b\x7b\x68\x88\x63\x51\x1f\x30\x2e\x71\x74\x8e\x08\x17\xf5\x4f\x28\xce\xb0\x22\xf8\x95\x11\x0a\x26\x28\xac\x90\x93\x1c\x4b\x78\xa3\x70\xd5\xbb\x2c\x49\x18\xcd\x81\xf7\x8a\xb1\x15\x7c\x7b\x30\x9b\xbd\xb9\xbd\x85\x6b\x22\x27\xe5\xc9\x75\x1f\x27\xec\x0a\x97\xa9\x7b\x28\xc1\xa2\x50\x63\x15\xf5\x05\xe3\x7b\x8b\x5f\x1b\x6c\x13\x61\x11\x72\x92\x4a\xc2\xa8\x79\x8f\x8e\x25\xbe\x91\xb9\x1d\x2f\x63\x22\x64\x31\x95\x23\x3a\xc6\x50\x87\xd9\x2c\xe7\xab\x69\x2c\x07\xd7\xf5\xa4\xb4\x62\x69\x45\x2a\xf6\xd5\x53\x1b\x16\x02\x14\x8c\xe5\xc4\x3b\x94\x32\x89\x14\x4f\x25\x94\x2b\xc3\x4f\xc3\x3b\x60\x19\x0f\x71\x33\x37\x26\xa6\x98\x23\xc9\x78\xee\x7e\x46\x85\xa2\x4a\x3a\x10\x31\x0a\xbf\xd5\x23\x3c\x42\x59\x2c\xeb\x92\xc8\x18\x17\x5a\x90\x38\x49\x63\x24\xcb\xbe\x58\xdf\xa4\xf2\x32\x9e\x4c\xa8\x10\x48\xaa\x50\x95\x03\x6d\x4b\x7c\x23\x14\xc7\x43\x14\x7e\x5b\xc3\x57\xc9\xbe\x42\x0a\x7f\xc3\x43\x13\x63\x42\xbf\x6d\xcd\x41\xca\xb1\x72\x16\x73\xbb\xd9\x2b\xf8\xef\x55\x80\x4e\x1b\x5b\x72\x40\x42\x46\x71\xc2\xbe\x92\x2d\x79\x50\xf3\x33\x1e\x6f\xcb\xf1\x9a\x70\x25\x37\x99\x90\x34\x9c\x20\xb9\x34\x08\x67\xc9\xd3\x8d\x7b\x17\x5b\x82\x85\x40\xe3\x47\x38\x5e\x89\xb7\x54\x51\x8b\x32\x39\x5d\xe0\x5b\x8f\xfe\xc7\x39\xf3\x3a\xc6\x30\x26\x98\xca\xa7\x4b\xbc\x09\xe3\xb2\x6e\x3c\xcd\x45\xd6\xf1\x12\x2a\x24\xa2\x21\x16\x15\x78\xd7\xd2\xdd\x3d\x5a\x65\xa9\x18\x63\x4a\xf0\xd3\x8d\x74\x1f\xb2\x75\x0b\x15\xd5\x61\x43\x32\xac\x2c\x07\xc6\x9d\x62\x54\xaa\x76\x7b\xd0\x00\x6b\x36\x33\xf2\x41\xc8\x07\x75\xda\xbd\x5f\x23\xe5\x92\xa9\x89\x58\x2b\x12\x55\xd0\xf3\xb1\x60\xf1\x15\x8e\xee\x50\x9c\x0f\x6f\x4f\x73\x0e\xb1\x46\xd5\xda\x46\xa5\x42\x57\x81\xc7\x7b\x53\xc9\xea\x57\x24\x94\x8c\xb3\x54\x2c\xd1\x4a\x24\xf1\x65\xd9\xf8\xaf\xb6\x7a\x9c\xad\xd6\xb5\x8a\xa9\x24\x72\x7a\x19\x11\x91\xc6\x68\x7a\xb9\xa1\x56\x3e\x1c\x58\xeb\x98\x13\x46\x89\x64\x4a\x21\x97\x92\xb1\xf8\x91\x29\x6b\x15\x37\x4e\x10\x89\x97\x7e\xb0\x6c\x47\x1f\xcd\x65\x19\xd3\x44\x26\x9a\x2d\xa3\xf5\xc3\x71\xbf\x1b\x7c\x39\x77\x40\x0d\xc1\xf9\xc5\x87\x9e\xdb\x05\xd3\xb2\xed\xcf\xef\xba\xb6\x7d\x1c\x1c\xc3\x6f\xa7\xc1\x59\x0f\xf6\xeb\x0d\x08\x38\xa2\x82\x28\x67\x43\xb1\x6d\x3b\x9e\x09\xe6\x44\xca\xb4\x69\xdb\xd7\xd7\xd7\xf5\xeb\x77\x75\xc6\xc7\x76\xe0\xdb\x37\x0a\xd7\xbe\x02\x2e\x7e\x5a\x72\x05\xb2\x1e\xc9\xc8\x3c\x32\x5a\x3f\x58\x96\x31\x90\xd3\x18\x03\xa2\x11\x68\x22\x11\xe6\x44\x19\x54\x95\x36\x50\xa8\x45\xd3\xb6\xc7\x44\x4e\xb2\x61\x3d\x64\x89\xad\x64\x18\x67\xd4\xd6\xe8\x50\x98\xe3\xb3\xb4\x68\xd6\x5c\x1d\xc2\x30\x8c\x60\x82\xe1\xcc\x0d\xa0\x47\x42\x4c\x05\x86\x37\x67\x6e\xb0\x67\x18\x5d\x96\x4e\x39\x19\x4f\x24\xbc\x09\xf7\xe0\x6d\x63\xff\x67\x38\xcb\x31\x1a\xc6\x39\xe6\x09\x11\x82\x30\x0a\x44\xc0\x04\x73\x3c\x9c\xc2\x98\x23\x2a\x71\x54\x83\x11\xc7\x18\xd8\x08\xc2\x09\xe2\x63\x5c\x03\xc9\x00\xd1\x29\xa4\x98\x0b\x46\x81\x0d\x25\x22\x54\xf9\x3f\x82\x90\xa5\x53\x83\x8d\x40\x4e\x88\x00\xc1\x46\xf2\x1a\xf1\x5c\x42\x24\x04\x0b\x09\x92\x38\x82\x88\x85\x59\x82\x69\x1e\xb8\x30\x22\x31\x16\xf0\x46\x4e\x30\x98\x83\x02\xc2\xdc\xd3\x44\x22\x8c\x62\x83\x50\x50\xef\xe6\xaf\x74\x27\xcf\x32\x09\x1c\x0b\xc9\x89\xd6\x42\x0d\x08\x0d\xe3\x2c\x52\x3c\xcc\x5f\xc7\x24\x21\x05\x05\x05\xae\x05\x17\x86\x64\x90\x09\x5c\xd3\x7c\xd6\x20\x61\x11\x19\xa9\x7f\xb1\x16\x2b\xcd\x86\x31\x11\x93\x1a\x44\x44\xa1\x1e\x66\x12\xd7\x40\xa8\x41\xad\xc7\x9a\x92\xc3\x66\x1c\x04\x8e\x63\x23\x64\x29\xc1\x02\xb4\xac\x4b\xee\xf4\x1c\xc5\x7a\xaa\x14\x2a\x0b\x15\x09\x35\x72\x3d\x61\x49\x59\x12\x22\x8c\x51\xc6\x29\x11\x13\xac\x61\x22\x06\x82\x69\x8a\xca\x9b\xd5\x88\x9a\x3e\x62\x71\xcc\xae\x95\x68\x21\xa3\x11\x29\x9a\x77\x6d\x64\x34\x54\x0b\x98\x70\x61\x57\xca\x24\x09\x73\x75\x6b\x03\xa4\x4b\xab\x16\xaf\xc4\x04\xc5\x31\x0c\x71\xa1\x30\x1c\x01\xa1\x80\x56\xc4\xe1\x8a\xbc\xaa\xdf\x92\xa0\x18\x52\xc6\x35\xbd\xbb\x62\xd6\x0d\x23\x38\x75\x60\xd0\x3f\x09\x3e\x77\x7c\x07\xdc\x01\x9c\xfb\xfd\x4f\xee\xb1\x73\x0c\x66\x67\x00\xee\xc0\xac\xc1\x67\x37\x38\xed\x5f\x04\xf0\xb9\xe3\xfb\x1d\x2f\xf8\x02\xfd\x13\xe8\x78\x5f\xe0\xff\x5c\xef\xb8\x06\xce\x6f\xe7\xbe\x33\x18\x40\xdf\x37\xdc\xb3\xf3\x9e\xeb\x1c\xd7\xc0\xf5\xba\xbd\x8b\x63\xd7\xfb\x08\x1f\x2e\x02\xf0\xfa\x01\xf4\xdc\x33\x37\x70\x8e\x21\xe8\x83\x22\x58\xa0\x72\x9d\x81\x42\x76\xe6\xf8\xdd\xd3\x8e\x17\x74\x3e\xb8\x3d\x37\xf8\x52\x33\x4e\xdc\xc0\x53\x38\x4f\xfa\x3e\x74\xe0\xbc\xe3\x07\x6e\xf7\xa2\xd7\xf1\xe1\xfc\xc2\x3f\xef\x0f\x1c\xe8\x78\xc7\xe0\xf5\x3d\xd7\x3b\xf1\x5d\xef\xa3\x73\xe6\x78\x41\x1d\x5c\x0f\xbc\x3e\x38\x9f\x1c\x2f\x80\xc1\x69\xa7\xd7\x53\xa4\x8c\xce\x45\x70\xda\xf7\x15\x7f\xd0\xed\x9f\x7f\xf1\xdd\x8f\xa7\x01\x9c\xf6\x7b\xc7\x8e\x3f\x80\x0f\x0e\xf4\xdc\xce\x87\x9e\x93\x93\xf2\xbe\x40\xb7\xd7\x71\xcf\x6a\x70\xdc\x39\xeb\x7c\x74\x34\x54\x3f\x38\x75\x7c\x43\x4d\xcb\xb9\x83\xcf\xa7\x8e\x1a\x52\xf4\x3a\x1e\x74\xba\x81\xdb\xf7\x94\x18\xdd\xbe\x17\xf8\x9d\x6e\x50\x83\xa0\xef\x07\x0b\xd0\xcf\xee\xc0\xa9\x41\xc7\x77\x07\x4a\x21\x27\x7e\xff\xac\x66\x28\x75\xf6\x4f\xd4\x14\xd7\x53\x70\x9e\x93\x63\x51\xaa\x86\x92\x45\xfa\xbe\x7e\xbe\x18\x38\x0b\x84\x70\xec\x74\x7a\xae\xf7\x71\xa0\x80\x95\x88\xf3\xc9\x75\xc3\xb2\x8e\x8c\x96\x4e\x81\x37\x49\x4c\x45\xbb\x22\xb1\xed\x1f\x1c\x1c\xe4\xf9\xcc\xdc\x6e\x92\x50\xc9\xad\x6d\x8e\x18\x95\xd6\x08\x25\x24\x9e\x36\xe1\xa7\x53\x1c\x5f\x61\x49\x42\x04\x1e\xce\xf0\x4f\x35\x58\x0c\xd4\xa0\xc3\x09\x8a\x6b\x20\x10\x15\x96\xc0\x9c\x8c\x0e\x61\xc8\x6e\x2c\x41\xfe\x52\xb5\x18\x86\x8c\x47\x98\x5b\x43\x76\x73\x08\x1a\xa9\x20\x7f\xe1\x26\xec\xff\x9c\xde\x1c\x42\x82\xf8\x98\xd0\x26\x34\x0e\x55\x6e\x9d\x60\x14\xbd\x24\xfd\x04\x4b\x04\xaa\xa2\xb6\xcd\x2b\x82\xaf\x55\x14\x99\x2a\x7a\x25\xa6\xb2\x6d\x5e\x93\x48\x4e\xda\x11\xbe\x22\x21\xb6\xf4\xc3\xcb\x29\x0b\xec\x39\xbb\xca\x98\x16\xfe\x33\x23\x57\x6d\xb3\x9b\xb3\x6a\x05\xd3\x14\xaf\x30\xae\x5a\x11\x5b\x19\xf7\x50\x57\x02\x81\x65\xfb\x22\x38\xb1\x7e\x7d\x61\xf6\xf5\x52\xf7\xe5\xcc\x7d\x5f\x2f\xd2\xb2\x35\x73\x47\x86\xd1\xb2\x95\x53\xaa\x1f\x43\x16\x4d\x81\x48\x9c\x88\x90\xa5\xb8\x6d\x9a\xfa\x41\x4e\xd5\xef\x22\xa2\x44\x38\xc1\x09\xd2\x11\xe5\xa8\xea\x7e\x36\xef\x7d\x9f\x55\x48\xeb\x1a\x0f\xbf\x11\x69\xe5\x2f\x12\xc6\xe4\x44\x03\xe5\xb5\x81\x20\x81\xa3\xe5\x24\xe5\x1b\x1a\xda\x42\xd1\xd7\x4c\xc8\x26\x50\x46\xf1\x21\x4c\xb0\xaa\x4c\x4d\xd8\x6f\x34\xfe\xe7\x10\x62\x42\xb1\xb5\x18\xaa\xbf\xc7\xc9\x21\xe8\x08\xc8\x27\xc0\x0f\x24\x51\xc1\x82\xa8\x3c\x84\x21\x0a\xbf\x8d\x39\xcb\x68\x64\x85\x2c\x66\xbc\x09\x3f\x8e\xde\xab\xbf\xab\xea\x87\x14\x45\x91\xe6\x4a\x79\xc3\x70\xac\x67\xb6\xcd\x62\xa6\xa9\xf4\x2d\xd1\xf0\xb9\xdd\x63\x45\xa4\x2d\xe5\xa8\xe4\x1d\xa0\x25\xf9\x0b\xe6\x31\x00\xc5\xc1\x33\x67\xd2\x2b\xcc\x15\x92\xd8\x42\x31\x19\xd3\x26\x48\x96\x96\x15\x75\xa5\x5f\xb4\x4d\xc9\x52\xf3\xa8\x65\xcb\x68\xc9\x68\x9e\x59\xcd\xf7\x8d\xc6\x33\x87\x4a\x25\xd3\xc5\xd2\xaa\x09\xc3\x98\x85\xdf\x4a\xbe\x9d\xa0\x1b\xab\x70\x92\xf7\x8d\x46\x7a\x53\x7a\x19\xc6\x18\x71\x45\x50\x4e\x4a\xe3\x9b\x02\x65\xa1\x1c\x40\x99\x64\x77\x42\xa2\xa4\x2d\xad\x28\x80\x56\x44\xae\x9e\xdb\xad\xca\xf2\xde\x55\xce\xfd\x42\xcc\xf9\x56\x46\xd6\xc1\x5c\xd8\x59\x69\xc2\x84\x10\xc7\x71\x31\xbb\x6d\x36\xf2\x67\x91\xa2\x70\xfe\xfc\xac\x82\x16\x2f\x39\x8a\x48\x26\x9a\xf0\x4e\x8f\x55\x24\x80\xd1\xa8\x94\xc5\x72\xb0\x26\xec\xa7\x37\x20\x58\x4c\x22\xf8\x11\x1f\xa8\xbf\xe5\xc4\x30\x1a\xad\xe8\x62\x17\xb2\xc3\x92\x93\xe7\xcb\x12\xef\x37\x06\x5c\x49\xbb\x1a\xe4\xba\x28\x35\xbf\x34\x1a\x87\xa0\x4b\x54\x31\x3f\xc4\x54\x62\x5e\x65\x2f\xfd\x5f\x43\x1b\x65\xdd\x6e\xce\xfb\x5f\xde\xbe\xed\x56\x17\xa0\xb7\xca\xaf\x4d\x28\xe2\x2d\x27\xb0\x6a\xbd\x1c\xb6\x3a\x22\xe7\x7f\x96\x3b\x66\x8b\xad\x32\xd0\x1f\x4b\x2a\xbf\x25\xed\xc1\x3e\xcc\x66\x62\xf1\xc1\x03\x46\x8c\xc3\x72\x57\x67\xc3\xae\x1a\xcc\x66\x77\xa8\xc2\xea\x1e\x4f\xbb\xb4\xc3\xb3\x36\xad\xf8\xb4\x52\x32\xfe\x22\x07\x2f\x9e\xf9\xab\x9b\x6e\x53\xcc\x96\xce\xb3\x9f\x3b\xcf\x7d\xbe\xb1\xf3\xb9\x6f\xa3\xda\x77\xcb\x09\x76\xdd\x15\x1a\xd0\x98\xe7\x92\xfb\xdc\xa1\x10\x03\xc1\x84\xe3\x51\xdb\xdc\xe6\x8b\xfb\x33\xfb\xc3\x3c\x69\x9e\x9c\x9c\x14\xc9\x37\xc2\x21\xe3\xfa\x9b\xdc\x7c\x79\x50\x5a\x10\xbc\x55\xcb\x81\x52\xde\x1e\xb2\x38\xaa\x4e\xdc\x61\xc6\x85\xc2\x9e\x32\x92\x0f\x2c\x1a\x0a\x42\x35\xd2\xa2\xaf\xb8\x93\xe0\x7f\x51\x8c\x69\x7c\xfa\x23\xea\x88\xf1\xa4\x09\x21\x4a\x89\x44\x31\xf9\x0b\x57\x26\xfd\x77\x3f\xff\x8a\x23\x54\x51\xaf\xd7\x66\x14\xc3\x5a\xcb\xcd\xbc\x90\x2f\x06\x17\xdd\x5b\x7a\x53\x98\xf7\xe8\x13\xc1\xd7\x40\x28\x3c\xf8\x75\xbc\x65\xa3\x4a\x1f\xbe\x93\x78\xab\xd3\x6f\xfe\xe7\xa1\xcd\x8f\x8a\xa2\xf0\x1a\xb2\xff\x4c\xc8\x0a\xc9\x19\x1d\xbf\x9c\x6a\x7f\xdf\x7c\x2e\xe7\x8f\x62\xe7\xab\x65\xe7\x4c\x7e\x07\xaf\xab\x68\x18\x8a\x37\xf3\xc3\x27\x77\xb7\xd0\x5e\xfd\xf0\xdf\xe1\x87\x79\x6b\xba\x70\xb5\xd6\xf0\xe5\xcc\x0c\x76\xb5\x8e\x1e\x38\x75\xb5\xf9\x68\xd4\x0b\x0b\xb3\x39\xee\xa0\xa2\x16\x2c\x37\xd1\xf3\x4a\xf0\xe2\x9e\xb1\xc2\xd1\xae\xb8\xc7\x83\x1a\x7d\xf0\x28\xdd\x7f\xa8\xb3\xac\x76\x98\x77\xcf\xf6\xbd\x50\x43\x39\x6f\xb7\xd6\x7a\xca\x8c\x46\x98\xab\xee\xaf\xec\x4e\xf9\xe9\x44\xd5\x44\xed\x5e\x8e\x79\x5a\x35\xdd\xb2\xbd\x5b\x3d\x6b\x52\x69\xde\xd7\xae\x70\x67\xaa\xf1\xce\x79\x26\x40\x6b\xb2\x83\x3c\xed\x9c\x9e\x1e\x13\xc1\xf7\x75\xc4\xaf\x81\xf5\xdf\xd9\xe6\xae\x2e\xb7\x16\x67\xf6\x96\x0b\xae\xf9\xd0\x0b\x2c\xb9\x56\x4f\x10\xbe\x7a\xe3\xbf\xc3\x1b\x5f\x17\x5d\xaf\x8b\xae\xd7\x45\xd7\xae\x3b\xcb\xeb\xa2\x6b\x67\x5a\xb6\x4d\x86\x6a\xd9\x7a\x3f\xee\xe8\x11\x5b\xa1\x0b\x90\xe5\xc8\xb3\x9f\xc4\x28\x1d\x4d\x5a\x39\x69\xb2\x34\xf4\xc1\xc1\xc1\x7d\x1b\xdc\xe5\x9d\xdd\xf5\x2d\xc9\xdd\x68\x1a\x76\xa9\x7d\x79\xce\xd6\xe5\xed\xc6\xd6\xa5\x72\x13\xed\x21\x93\xaf\xf4\x36\x77\xce\x35\x94\x4f\x61\xad\xa6\xab\xf2\xed\xe3\xe7\x73\x88\xb7\xab\xd9\x4a\x4b\xb4\x75\xaa\xc2\x54\xc2\x70\xba\xdd\x3e\xdc\x7a\xee\x58\x3b\xef\x70\x37\x33\xb4\xec\x88\x5c\x1d\xe5\xff\x37\xca\x69\x62\xd7\xda\xda\x0d\xc7\xeb\x72\x11\x97\xf9\xab\x65\x0f\x59\x34\x55\x23\x13\x99\xc4\x47\x86\x51\x7d\x7f\x27\xcd\xc4\x84\x5d\x61\xfe\x1d\x6e\xf7\xae\xa1\xfa\xe7\xef\x83\x7d\x9f\xeb\x60\xdb\xdf\x06\xfb\x7e\x97\xc1\x56\x68\x6e\xa1\xc9\xe5\x15\xdd\xc7\xdc\xd9\x5b\xc1\xf8\x95\x70\xb4\x72\x4b\x2b\x49\x10\x9f\x3e\xc9\xc8\x25\x44\xeb\x17\x34\x37\x6c\x18\x7e\xdf\x2b\xf2\xc6\x3f\x75\x47\xde\x78\xe4\x25\xf9\xff\x0f\x00\x00\xff\xff\x69\xa7\x03\x2f\x1d\x42\x00\x00")

func templateDefaultTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateDefaultTmpl,
		"template/default.tmpl",
	)
}

func templateDefaultTmpl() (*asset, error) {
	bytes, err := templateDefaultTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/default.tmpl", size: 16925, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/default.tmpl": templateDefaultTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"default.tmpl": &bintree{templateDefaultTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

