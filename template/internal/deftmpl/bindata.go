// Code generated by go-bindata.
// sources:
// template/default.tmpl
// DO NOT EDIT!

package deftmpl

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateDefaultTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x1b\xff\x4f\xdb\xb8\xfe\xf7\xfc\x15\x9f\xcb\xe9\xe9\x86\xd4\x36\x85\xdd\x4d\x47\x69\x79\xea\x4a\x18\xd1\x2b\x29\x4a\xc3\x76\xd3\xe9\x84\xdc\xc4\x6d\xbd\x25\x76\xce\x76\x28\x3d\xd6\xff\xfd\xc9\x4e\xfa\x25\x34\x85\x82\x76\xd0\xf7\x0e\xd0\x46\xe2\xf8\xf3\xfd\xab\x63\xe7\xf6\x16\x42\x3c\x24\x14\x83\x79\x75\x85\x22\xcc\x65\x8c\x28\x1a\x61\x6e\xc2\x6c\xd6\x56\xf7\xe7\xd9\xfd\xed\x2d\x60\x1a\xc2\x6c\x66\x6c\x04\xb9\xf4\xba\x0a\xea\xf6\x16\x6a\xf6\x8d\xc4\x9c\xa2\xe8\xd2\xeb\xc2\x6c\x66\xfd\x68\xe9\x79\xe2\xdf\x1c\x07\x98\x5c\x63\xde\x52\x93\xbc\xfc\x26\x83\xc9\xb1\x17\xd1\x8b\x74\xf0\x05\x07\x52\xa1\xfd\x5d\x81\xf4\x25\x92\xa9\x80\x6f\x20\xd9\x65\x92\xcc\x41\xc9\x10\xf0\x9f\x8b\x87\xe6\x90\x70\x42\x47\x0a\xa6\xa1\x60\xb4\x14\xa2\x76\xaa\x47\xe1\x1b\x44\x98\xae\x52\xfc\x03\xd4\xa4\x0f\x9c\xa5\x49\x17\x0d\x70\x24\x6a\x7d\xc6\x25\x0e\x2f\x10\xe1\xa2\xf6\x11\x45\x29\x56\x04\xbf\x30\x42\xc1\x04\x85\x15\x32\x92\x23\x09\x6f\x14\xae\x5a\x87\xc5\x31\xa3\x19\xf0\x5e\x3e\xb6\x82\x6f\x0f\x66\xb3\x37\xb7\xb7\x30\x21\x72\x5c\x9c\x5c\xf3\x70\xcc\xae\x71\x91\xba\x8b\x62\x2c\x72\x35\x96\x51\x5f\x30\xbe\xb7\xb8\xda\x60\x9b\x10\x8b\x80\x93\x44\x12\x46\xcd\x7b\x74\x2c\xf1\x8d\xcc\xec\x78\x15\x11\x21\xf3\xa9\x1c\xd1\x11\x86\x1a\xcc\x66\x19\x5f\x0d\x63\x39\xb8\xae\x27\xa5\x95\xaa\x56\xa4\x62\x5f\xdd\xb5\x60\x21\x40\xce\x58\x46\xbc\x4d\x29\x93\x48\xf1\x54\x40\xb9\x32\xfc\x34\xbc\x7d\x96\xf2\x00\x37\x32\x63\x62\x8a\x39\x92\x8c\x67\xee\x67\x94\x28\xaa\xa0\x03\x11\xa1\xe0\x6b\x2d\xc4\x43\x94\x46\xb2\x26\x89\x8c\x70\xae\x05\x89\xe3\x24\x42\xb2\xe8\x8b\xb5\x4d\x2a\x2f\xe2\x49\x85\x0a\x81\xb8\x0c\x55\x31\xd0\xb6\xc4\x37\x44\x51\x34\x40\xc1\xd7\x35\x7c\xa5\xec\x2b\xa4\xf0\x0d\x1e\x9a\x18\x11\xfa\x75\x6b\x0e\x12\x8e\x95\xb3\x98\xdb\xcd\x5e\xc1\x7f\xaf\x02\x74\xda\xd8\x92\x03\x12\x30\x8a\x63\xf6\x85\x6c\xc9\x83\x9a\x9f\xf2\x68\x5b\x8e\xd7\x84\x2b\xb8\xc9\x98\x24\xc1\x18\xc9\xa5\x41\x38\x8b\x9f\x6e\xdc\xbb\xd8\x62\x2c\x04\x1a\x3d\xc2\xf1\x0a\xbc\x25\x8a\x5a\x98\xca\xe9\x02\xdf\x7a\xf4\x3f\xce\x99\xd7\x31\x06\x11\xc1\x54\x3e\x5d\xe2\x4d\x18\x97\x75\xe3\x69\x2e\xb2\x8e\x97\x50\x21\x11\x0d\xb0\x28\xc1\xbb\x96\xee\xee\xd1\x2a\x4b\xc4\x08\x53\x82\x9f\x6e\xa4\xfb\x90\xad\x5b\x28\xaf\x0e\x1b\x92\x61\x69\x39\x30\xee\x14\xa3\x42\xb5\xdb\x83\x3a\x54\x67\x33\x23\x1b\x84\x6c\x50\xa7\xdd\xfb\x35\x52\x2c\x99\x9a\x48\x75\x45\xa2\x12\x7a\x1e\x16\x2c\xba\xc6\xe1\x1d\x8a\xf3\xe1\xed\x69\xce\x21\xd6\xa8\x56\xb7\x51\xa9\xd0\x55\xe0\xf1\xde\x54\xb0\xfa\x04\x3f\x25\x30\x8d\x57\xfb\xdd\x63\xbf\xf6\xaa\xfe\x79\xb4\x86\xaf\xd4\x3e\xab\x08\x8a\x26\xba\x26\x81\x64\x9c\x25\x62\x69\x79\x89\x24\xbe\x2a\xda\xea\xd5\x1c\x8f\x0b\xa7\x75\xad\x62\x2a\x89\x9c\x5e\x85\x44\x24\x11\x9a\x5e\x6d\x68\x67\x1e\xce\x7d\xeb\x98\x63\x46\x89\x64\x4a\x21\x57\x92\xb1\xe8\x91\x55\x65\x15\x37\x8e\x11\x89\x96\x7e\xb0\x5c\x31\x3c\x9a\xcb\x22\xa6\xb1\x8c\x35\x5b\x46\xf3\x87\x93\x5e\xc7\xff\x7c\x61\x83\x1a\x82\x8b\xcb\xf7\x5d\xa7\x03\x66\xd5\xb2\x3e\xbd\xed\x58\xd6\x89\x7f\x02\xbf\x9d\xf9\xe7\x5d\xd8\xaf\xd5\xc1\xe7\x88\x0a\xa2\x9c\x0d\x45\x96\x65\xbb\x26\x98\x63\x29\x93\x86\x65\x4d\x26\x93\xda\xe4\x6d\x8d\xf1\x91\xe5\x7b\xd6\x8d\xc2\xb5\xaf\x80\xf3\xcb\xaa\x5c\x81\xac\x85\x32\x34\x8f\x8d\xe6\x0f\xd5\xaa\xd1\x97\xd3\x08\x03\xa2\x21\x68\x22\x21\xe6\x44\x19\x54\x75\x1f\xa0\x50\x8b\x86\x65\x8d\x88\x1c\xa7\x83\x5a\xc0\x62\x4b\xc9\x30\x4a\xa9\xa5\xd1\xa1\x20\xc3\x57\xd5\xa2\x55\xe7\xea\x10\x86\x61\xf8\x63\x0c\xe7\x8e\x0f\x5d\x12\x60\x2a\x30\xbc\x39\x77\xfc\x3d\xc3\xe8\xb0\x64\xca\xc9\x68\x2c\xe1\x4d\xb0\x07\x07\xf5\xfd\x9f\xe1\x3c\xc3\x68\x18\x17\x98\xc7\x44\x08\xc2\x28\x10\x01\x63\xcc\xf1\x60\x0a\x23\x8e\xa8\xc4\x61\x05\x86\x1c\x63\x60\x43\x08\xc6\x88\x8f\x70\x05\x24\x03\x44\xa7\x90\x60\x2e\x18\x05\x36\x90\x88\x50\xe5\xff\x08\x02\x96\x4c\x0d\x36\x04\x39\x26\x02\x04\x1b\xca\x09\xe2\x99\x84\x48\x08\x16\x10\x24\x71\x08\x21\x0b\xd2\x18\xd3\x2c\x70\x61\x48\x22\x2c\xe0\x8d\x1c\x63\x30\xfb\x39\x84\xb9\xa7\x89\x84\x18\x45\x06\xa1\xa0\x9e\xcd\x1f\xe9\xc5\x16\x4b\x25\x70\x2c\x24\x27\x5a\x0b\x15\x20\x34\x88\xd2\x50\xf1\x30\x7f\x1c\x91\x98\xe4\x14\x14\xb8\x16\x5c\x18\x92\x41\x2a\x70\x45\xf3\x59\x81\x98\x85\x64\xa8\xfe\x62\x2d\x56\x92\x0e\x22\x22\xc6\x15\x08\x89\x42\x3d\x48\x25\xae\x80\x50\x83\x5a\x8f\x15\x25\x87\xc5\x38\x08\x1c\x45\x46\xc0\x12\x82\x05\x68\x59\x97\xdc\xe9\x39\x8a\xf5\x44\x29\x54\xe6\x2a\x12\x6a\x64\x32\x66\x71\x51\x12\x22\x8c\x61\xca\x29\x11\x63\xac\x61\x42\x06\x82\x69\x8a\xca\x9b\xd5\x88\x9a\x3e\x64\x51\xc4\x26\x4a\xb4\x80\xd1\x90\xe4\xeb\x2b\x6d\x64\x34\x50\x6b\xcc\x60\x61\x57\xca\x24\x09\x32\x75\x6b\x03\x24\x4b\xab\xe6\x8f\xc4\x18\x45\x11\x0c\x70\xae\x30\x1c\x02\xa1\x80\x56\xc4\xe1\x8a\xbc\x6a\xb1\x24\x41\x11\x24\x8c\x6b\x7a\x77\xc5\xac\x19\x86\x7f\x66\x43\xbf\x77\xea\x7f\x6a\x7b\x36\x38\x7d\xb8\xf0\x7a\x1f\x9d\x13\xfb\x04\xcc\x76\x1f\x9c\xbe\x59\x81\x4f\x8e\x7f\xd6\xbb\xf4\xe1\x53\xdb\xf3\xda\xae\xff\x19\x7a\xa7\xd0\x76\x3f\xc3\x7f\x1c\xf7\xa4\x02\xf6\x6f\x17\x9e\xdd\xef\x43\xcf\x33\x9c\xf3\x8b\xae\x63\x9f\x54\xc0\x71\x3b\xdd\xcb\x13\xc7\xfd\x00\xef\x2f\x7d\x70\x7b\x3e\x74\x9d\x73\xc7\xb7\x4f\xc0\xef\x81\x22\x98\xa3\x72\xec\xbe\x42\x76\x6e\x7b\x9d\xb3\xb6\xeb\xb7\xdf\x3b\x5d\xc7\xff\x5c\x31\x4e\x1d\xdf\x55\x38\x4f\x7b\x1e\xb4\xe1\xa2\xed\xf9\x4e\xe7\xb2\xdb\xf6\xe0\xe2\xd2\xbb\xe8\xf5\x6d\x68\xbb\x27\xe0\xf6\x5c\xc7\x3d\xf5\x1c\xf7\x83\x7d\x6e\xbb\x7e\x0d\x1c\x17\xdc\x1e\xd8\x1f\x6d\xd7\x87\xfe\x59\xbb\xdb\x55\xa4\x8c\xf6\xa5\x7f\xd6\xf3\x14\x7f\xd0\xe9\x5d\x7c\xf6\x9c\x0f\x67\x3e\x9c\xf5\xba\x27\xb6\xd7\x87\xf7\x36\x74\x9d\xf6\xfb\xae\x9d\x91\x72\x3f\x43\xa7\xdb\x76\xce\x2b\x70\xd2\x3e\x6f\x7f\xb0\x35\x54\xcf\x3f\xb3\x3d\x43\x4d\xcb\xb8\x83\x4f\x67\xb6\x1a\x52\xf4\xda\x2e\xb4\x3b\xbe\xd3\x73\x95\x18\x9d\x9e\xeb\x7b\xed\x8e\x5f\x01\xbf\xe7\xf9\x0b\xd0\x4f\x4e\xdf\xae\x40\xdb\x73\xfa\x4a\x21\xa7\x5e\xef\xbc\x62\x28\x75\xf6\x4e\xd5\x14\xc7\x55\x70\xae\x9d\x61\x51\xaa\x86\x82\x45\x7a\x9e\xbe\xbf\xec\xdb\x0b\x84\x70\x62\xb7\xbb\x8e\xfb\xa1\xaf\x80\x95\x88\xf3\xc9\x35\xa3\x5a\x3d\x36\x9a\x3a\x05\xde\xc4\x11\x15\xad\x92\xc4\xb6\x7f\x78\x78\x98\xe5\x33\x73\xbb\x49\x42\x25\xb7\x96\x39\x64\x54\x56\x87\x28\x26\xd1\xb4\x01\x3f\x9d\xe1\xe8\x1a\x4b\x12\x20\x70\x71\x8a\x7f\xaa\xc0\x62\xa0\x02\x6d\x4e\x50\x54\x01\x81\xa8\xa8\x0a\xcc\xc9\xf0\x08\x06\xec\xa6\x2a\xc8\x5f\xaa\x16\xc3\x80\xf1\x10\xf3\xea\x80\xdd\x1c\x81\x46\x2a\xc8\x5f\xb8\x01\xfb\x3f\x27\x37\x47\x10\x23\x3e\x22\xb4\x01\xf5\x23\x95\x5b\xc7\x18\x85\x2f\x49\x3f\xc6\x12\x81\xaa\xa8\x2d\xf3\x9a\xe0\x89\x8a\x22\x53\x45\xaf\xc4\x54\xb6\xcc\x09\x09\xe5\xb8\x15\xe2\x6b\x12\xe0\xaa\xbe\x79\x39\x65\x81\x35\x67\x57\x19\xb3\x8a\xff\x4c\xc9\x75\xcb\xec\x64\xac\x56\xfd\x69\x82\x57\x18\x57\xad\x88\xa5\x8c\x7b\xa4\x2b\x81\xc0\xb2\x75\xe9\x9f\x56\x7f\x7d\x61\xf6\xf5\xdb\x88\x97\x33\xf7\x7d\xbd\x48\xd3\xd2\xcc\x1d\x1b\x46\xd3\x52\x4e\xa9\x2e\x06\x2c\x9c\x02\x91\x38\x16\x01\x4b\x70\xcb\x34\xf5\x8d\x9c\xaa\xeb\x3c\xa2\x44\x30\xc6\x31\xd2\x11\x65\xab\xea\x7e\x3e\xef\x7d\x9f\x55\xc8\xea\x04\x0f\xbe\x12\x59\xcd\x1e\xc4\x8c\xc9\xb1\x06\xca\x6a\x03\x41\x02\x87\xcb\x49\xca\x37\x34\x74\x15\x85\x5f\x52\x21\x1b\x40\x19\xc5\x47\x30\xc6\xaa\x32\x35\x60\xbf\x5e\xff\xd7\x11\x44\x84\xe2\xea\x62\xa8\xf6\x0e\xc7\x47\xa0\x23\x20\x9b\x00\x3f\x90\x58\x05\x0b\xa2\xf2\x08\x06\x28\xf8\x3a\xe2\x2c\xa5\x61\x35\x60\x11\xe3\x0d\xf8\x71\xf8\x4e\xfd\xae\xaa\x1f\x12\x14\x86\x9a\x2b\xe5\x0d\x83\x91\x9e\xd9\x32\xf3\x99\xa6\xd2\xb7\x44\x83\xe7\x76\x8f\x15\x91\xb6\x94\xa3\x94\x77\x80\xa6\xe4\x2f\x98\xc7\x00\x14\x07\xcf\x9c\x49\xaf\x31\x57\x48\xa2\x2a\x8a\xc8\x88\x36\x40\xb2\xa4\xa8\xa8\x6b\xfd\xa0\x65\x4a\x96\x98\xc7\x4d\x4b\x86\x4b\x46\xb3\xcc\x6a\xbe\xab\xd7\x9f\x39\x54\x4a\x99\xce\x97\x56\x0d\x18\x44\x2c\xf8\x5a\xf0\xed\x18\xdd\x54\x73\x27\x79\x57\xaf\x27\x37\x85\x87\x41\x84\x11\x57\x04\xe5\xb8\x30\xbe\x29\x50\x16\xca\x01\x94\x4a\x76\x27\x24\x0a\xda\xd2\x8a\x02\x68\x86\xe4\xfa\xb9\xdd\xaa\x28\xef\x5d\xe5\xdc\x2f\xc4\x9c\x6f\x65\x64\x1d\xcc\xb9\x9d\x95\x26\x4c\x08\x70\x14\xe5\xb3\x5b\x66\x3d\xbb\x17\x09\x0a\xe6\xf7\xcf\x2a\x68\xfe\x90\xa3\x90\xa4\xa2\x01\x6f\xf5\x58\x49\x02\x18\x0e\x0b\x59\x2c\x03\x6b\xc0\x7e\x72\x03\x82\x45\x24\x84\x1f\xf1\xa1\xfa\x2d\x26\x86\xe1\x70\x45\x17\xbb\x90\x1d\x96\x9c\x3c\x5f\x96\x78\xb7\x31\xe0\x0a\xda\xd5\x20\x93\xbc\xd4\xfc\x52\xaf\x1f\x81\x2e\x51\xf9\xfc\x00\x53\x89\x79\x99\xbd\xf4\xbf\xba\x36\xca\xba\xdd\xec\x77\xbf\x1c\x1c\x74\xca\x0b\xd0\x81\xf2\x6b\x13\xf2\x78\xcb\x08\xac\x5a\x2f\x83\x2d\x8f\xc8\xf9\xcf\x72\x53\x73\xb1\x9b\x09\xfa\x65\x49\xe9\xbb\xa4\x3d\xd8\x87\xd9\x4c\x2c\x5e\x78\xc0\x90\x71\x58\x6e\xbc\x6d\xd8\xf8\x84\xd9\xec\x0e\x55\x58\xdd\x86\x6b\x15\x36\xe1\xd6\xa6\xe5\xaf\x56\x0a\xc6\x5f\xe4\xe0\xc5\x3d\x7f\x75\xd3\x6d\x8a\xd9\xd2\x79\xf6\x33\xe7\xb9\xcf\x37\x76\x3e\xf7\x6d\x54\xfb\x6e\x39\xc1\xae\xbb\x42\x1d\xea\xf3\x5c\x72\x9f\x3b\xe4\x62\x20\x18\x73\x3c\x6c\x99\xdb\xbc\x74\x7f\x66\x7f\x98\x27\xcd\xd3\xd3\xd3\x3c\xf9\x86\x38\x60\x5c\xbf\x93\x9b\x2f\x0f\x0a\x0b\x82\x03\xb5\x1c\x28\xe4\xed\x01\x8b\xc2\xf2\xc4\x1d\xa4\x5c\x28\xec\x09\x23\xd9\xc0\xa2\xa1\x20\x54\x23\xcd\xfb\x8a\x3b\x09\xfe\x17\xc5\x98\xc6\xa7\x5f\xa2\x0e\x19\x8f\x1b\x10\xa0\x84\x48\x14\x91\xbf\x70\x69\xd2\x7f\xfb\xf3\xaf\x38\x44\x25\xf5\x7a\x6d\x46\x3e\xac\xb5\xdc\xc8\x0a\xf9\x62\x70\xd1\xbd\x25\x37\xb9\x79\x8f\x3f\x12\x3c\x01\x42\xe1\xc1\xb7\xe3\x4d\x0b\x95\xfa\xf0\x9d\xc4\x5b\x9e\x7e\xb3\x9f\x87\x36\x3f\x4a\x8a\xc2\x6b\xc8\xfe\x3d\x21\x2b\x24\x67\x74\xf4\x72\xaa\xfd\x7d\xf3\xd1\xa9\x3f\xf2\x9d\xaf\xa6\x95\x31\xf9\x1d\xbc\xae\xa4\x61\xc8\x9f\xcc\xcf\x07\xdd\xdd\x42\x7b\xf5\xc3\x7f\x86\x1f\x66\xad\xe9\xc2\xd5\x9a\x83\x97\x33\x33\x58\xe5\x3a\x7a\xe0\x60\xdc\xe6\xd3\x6b\x2f\x2c\xcc\xe6\xb8\x83\x92\x5a\xb0\xdc\x44\xcf\x2a\xc1\x8b\x7b\xc6\x0a\x47\xbb\xe2\x1e\x0f\x6a\xf4\xc1\xd3\x8e\xff\xa3\xce\xb2\xda\x61\xde\x3d\x7e\xf9\x42\x0d\xe5\xbc\xdd\x5a\xeb\x29\x53\x1a\x62\xae\xba\xbf\xa2\x3b\x65\x07\x48\x55\x13\xb5\x7b\x39\xe6\x69\xd5\x74\xcb\xf6\x6e\xf5\xac\x49\xa9\x79\x5f\xbb\xc2\x9d\xa9\xc6\x3b\xe7\x99\x00\xcd\xf1\x0e\xf2\xb4\x73\x7a\x7a\x4c\x04\xdf\xd7\x11\xbf\x06\xd6\xff\x67\x9b\xbb\xba\xdc\x5a\x9c\xd9\x5b\x2e\xb8\xe6\x43\x2f\xb0\xe4\x5a\x3d\x41\xf8\xea\x8d\xff\x0c\x6f\x7c\x5d\x74\xbd\x2e\xba\x5e\x17\x5d\xbb\xee\x2c\xaf\x8b\xae\x9d\x69\xd9\x36\x19\xaa\x69\xe9\xfd\xb8\xe3\x47\x6c\x85\x2e\x40\x96\x23\xcf\x7e\x12\xa3\x70\x34\x69\xe5\xa4\xc9\xd2\xd0\x87\x87\x87\xf7\x6d\x70\x17\x77\x76\xd7\xb7\x24\x77\xa3\x69\xd8\xa5\xf6\xe5\x39\x5b\x97\x83\x8d\xad\x4b\xe9\x26\xda\x43\x26\x5f\xe9\x6d\xee\x9c\x6b\x28\x9e\xc2\x5a\x4d\x57\xc5\x0f\xc4\x9f\xcf\x21\x0e\x56\xb3\x95\x96\x68\xeb\x54\x85\xa9\x84\xc1\x74\xbb\x7d\xb8\xf5\xdc\xb1\x76\xde\xe1\x6e\x66\x68\x5a\x21\xb9\x3e\xce\xfe\x37\x8a\x69\x62\xd7\xda\xda\x0d\xc7\xeb\x32\x11\x97\xf9\xab\x69\x0d\x58\x38\x55\x23\x63\x19\x47\xc7\x86\x51\xfe\xfd\x4e\x92\x8a\x31\xbb\xc6\xfc\x3b\x7c\x80\xbd\x86\xea\xef\xff\x1e\xec\xfb\x7c\x0e\xb6\xfd\xd7\x60\xdf\xef\x63\xb0\x15\x9a\x5b\x68\x72\xf9\x15\xf5\x23\x3e\xab\xfc\x6f\x00\x00\x00\xff\xff\xed\x58\x62\xaa\x5e\x42\x00\x00")

func templateDefaultTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateDefaultTmpl,
		"template/default.tmpl",
	)
}

func templateDefaultTmpl() (*asset, error) {
	bytes, err := templateDefaultTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/default.tmpl", size: 16990, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/default.tmpl": templateDefaultTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"default.tmpl": &bintree{templateDefaultTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

