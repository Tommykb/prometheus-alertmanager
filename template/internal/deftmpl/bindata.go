// Code generated by go-bindata.
// sources:
// template/default.tmpl
// DO NOT EDIT!

package deftmpl

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateDefaultTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x1b\x7b\x6f\xdb\x36\xfe\x7f\x7d\x8a\xdf\x34\x1c\xd6\x00\x96\xe5\xb4\x5b\xb1\x38\x76\x0e\xae\xa3\x34\xc2\x39\x72\x20\x2b\xed\x8a\x61\x28\x68\x89\xb6\xd9\x4a\xa4\x46\x52\x49\xdc\xcc\xdf\xfd\x40\x4a\x7e\xc8\x96\x53\xa7\xe8\x12\xdf\x2d\x2d\xb6\x5a\x14\x7f\xef\x27\x45\xf2\xee\x0e\x22\x3c\x22\x14\x83\xf9\xf1\x23\x8a\x31\x97\x09\xa2\x68\x8c\xb9\x09\xb3\x59\x47\x3d\x5f\xe4\xcf\x77\x77\x80\x69\x04\xb3\x99\xb1\x15\xe4\xca\xef\x29\xa8\xbb\x3b\xa8\x3b\xb7\x12\x73\x8a\xe2\x2b\xbf\x07\xb3\x99\xfd\xa3\xad\xe7\x89\x7f\x73\x1c\x62\x72\x8d\x79\x5b\x4d\xf2\x8b\x87\x1c\xa6\xc0\x5e\x46\x2f\xb2\xe1\x27\x1c\x4a\x85\xf6\x77\x05\x32\x90\x48\x66\x02\xfe\x02\xc9\xae\xd2\x74\x0e\x4a\x46\x80\xff\x5c\xbc\x34\x47\x84\x13\x3a\x56\x30\x4d\x05\xa3\xa5\x10\xf5\x33\x3d\x0a\x7f\x41\x8c\xe9\x2a\xc5\x3f\x40\x4d\x7a\xcb\x59\x96\xf6\xd0\x10\xc7\xa2\x3e\x60\x5c\xe2\xe8\x12\x11\x2e\xea\xef\x50\x9c\x61\x45\xf0\x13\x23\x14\x4c\x50\x58\x21\x27\x39\x96\xf0\x42\xe1\xaa\x77\x59\x92\x30\x9a\x03\x1f\x14\x63\x2b\xf8\x0e\x60\x36\x7b\x71\x77\x07\x37\x44\x4e\xca\x93\xeb\x3e\x4e\xd8\x35\x2e\x53\xf7\x50\x82\x45\xa1\xc6\x2a\xea\x0b\xc6\x0f\x16\xbf\xb6\xd8\x26\xc2\x22\xe4\x24\x95\x84\x51\xf3\x1e\x1d\x4b\x7c\x2b\x73\x3b\x7e\x8c\x89\x90\xc5\x54\x8e\xe8\x18\x43\x1d\x66\xb3\x9c\xaf\xa6\xb1\x1c\xdc\xd4\x93\xd2\x8a\xa5\x15\xa9\xd8\x57\x4f\x6d\x58\x08\x50\x30\x96\x13\xef\x50\xca\x24\x52\x3c\x95\x50\xae\x0c\x7f\x1b\xde\x01\xcb\x78\x88\x9b\xb9\x31\x31\xc5\x1c\x49\xc6\x73\xf7\x33\x2a\x14\x55\xd2\x81\x88\x51\xf8\xb9\x1e\xe1\x11\xca\x62\x59\x97\x44\xc6\xb8\xd0\x82\xc4\x49\x1a\x23\x59\xf6\xc5\xfa\x36\x95\x97\xf1\x64\x42\x85\x40\x52\x85\xaa\x1c\x68\x3b\xe2\x1b\xa1\x38\x1e\xa2\xf0\xf3\x06\xbe\x4a\xf6\x15\x52\xf8\x0b\xbe\x36\x31\x26\xf4\xf3\xce\x1c\xa4\x1c\x2b\x67\x31\x77\x9b\xbd\x82\xff\x5e\x05\xe8\xb4\xb1\x23\x07\x24\x64\x14\x27\xec\x13\xd9\x91\x07\x35\x3f\xe3\xf1\xae\x1c\x6f\x08\x57\x72\x93\x09\x49\xc3\x09\x92\x4b\x83\x70\x96\x7c\xbb\x71\xd7\xb1\x25\x58\x08\x34\x7e\x80\xe3\x95\x78\x4b\x15\xb5\x28\x93\xd3\x05\xbe\xcd\xe8\x7f\x98\x33\x6f\x62\x0c\x63\x82\xa9\xfc\x76\x89\xb7\x61\x5c\xd6\x8d\x6f\x73\x91\x4d\xbc\x84\x0a\x89\x68\x88\x45\x05\xde\x8d\x74\x77\x8f\x56\x59\x2a\xc6\x98\x12\xfc\xed\x46\xba\x0f\xd9\xa6\x85\x8a\xea\xb0\x25\x19\x56\x96\x03\x63\xad\x18\x95\xaa\xdd\x01\x34\xc0\x9a\xcd\x8c\x7c\x10\xf2\x41\x9d\x76\xef\xd7\x48\xb9\x64\x6a\x22\xd6\x8a\x44\x15\xf4\x7c\x2c\x58\x7c\x8d\xa3\x35\x8a\xf3\xe1\xdd\x69\xce\x21\x36\xa8\x5a\xbb\xa8\x54\xe8\x2a\xf0\x70\x6f\x2a\x59\xfd\x9a\x84\x92\x71\x96\x8a\x25\x5a\x89\x24\xfe\xb8\xa3\xf1\xd7\xb3\xee\x43\x5c\x79\x93\x74\xc2\x28\x91\x4c\xd9\xe1\xa3\x64\x2c\x7e\x60\xf4\x95\xe4\xc2\x09\x22\xf1\x52\xa6\x65\x6b\xf5\x60\x57\x2e\x63\x9a\xc8\x44\xf3\x65\xb4\x7e\x38\xed\x77\x83\x0f\x97\x0e\xa8\x21\xb8\xbc\x7a\xd3\x73\xbb\x60\x5a\xb6\xfd\xfe\x55\xd7\xb6\x4f\x83\x53\xf8\xed\x3c\xb8\xe8\xc1\x61\xbd\x01\x01\x47\x54\x10\xe5\xe4\x28\xb6\x6d\xc7\x33\xc1\x9c\x48\x99\x36\x6d\xfb\xe6\xe6\xa6\x7e\xf3\xaa\xce\xf8\xd8\x0e\x7c\xfb\x56\xe1\x3a\x54\xc0\xc5\x4f\x4b\xae\x40\xd6\x23\x19\x99\x27\x46\xeb\x07\xcb\x32\x06\x72\x1a\x63\x40\x34\x02\x4d\x24\xc2\x9c\x28\x47\x52\x69\x1a\x14\x6a\xd1\xb4\xed\x31\x91\x93\x6c\x58\x0f\x59\x62\x2b\x19\xc6\x19\xb5\x35\x3a\x14\xe6\xf8\x2c\x2d\x9a\x35\x57\x87\x30\x0c\x23\x98\x60\xb8\x70\x03\xe8\x91\x10\x53\x81\xe1\xc5\x85\x1b\x1c\x18\x46\x97\xa5\x53\x4e\xc6\x13\x09\x2f\xc2\x03\x78\xd9\x38\xfc\x19\x2e\x72\x8c\x86\x71\x89\x79\x42\x84\x20\x8c\x02\x11\x30\xc1\x1c\x0f\xa7\x30\xe6\x88\x4a\x1c\xd5\x60\xc4\x31\x06\x36\x82\x70\x82\xf8\x18\xd7\x40\x32\x40\x74\x0a\x29\xe6\x82\x51\x60\x43\x89\x08\x55\x71\x87\x20\x64\xe9\xd4\x60\x23\x90\x13\x22\x40\xb0\x91\xbc\x41\x3c\x97\x10\x09\xc1\x42\x82\x24\x8e\x20\x62\x61\x96\x60\x9a\x27\x0c\x18\x91\x18\x0b\x78\x21\x27\x18\xcc\x41\x01\x61\x1e\x68\x22\x11\x46\xb1\x41\x28\xa8\x77\xf3\x57\xba\x2b\x65\x99\x04\x8e\x85\xe4\x44\x6b\xa1\x06\x84\x86\x71\x16\x29\x1e\xe6\xaf\x63\x92\x90\x82\x82\x02\xd7\x82\x0b\x43\x32\xc8\x04\xae\x69\x3e\x6b\x90\xb0\x88\x8c\xd4\xbf\x58\x8b\x95\x66\xc3\x98\x88\x49\x0d\x22\xa2\x50\x0f\x33\x89\x6b\x20\xd4\xa0\xd6\x63\x4d\xc9\x61\x33\x0e\x02\xc7\xb1\x11\xb2\x94\x60\x01\x5a\xd6\x25\x77\x7a\x8e\x62\x3d\x55\x0a\x95\x85\x8a\x84\x1a\xb9\x99\xb0\xa4\x2c\x09\x11\xc6\x28\xe3\x94\x88\x09\xd6\x30\x11\x03\xc1\x34\x45\xe5\xcd\x6a\x44\x4d\x1f\xb1\x38\x66\x37\x4a\xb4\x90\xd1\x88\x14\x8d\xa8\x36\x32\x1a\xaa\x66\x3c\x5c\xd8\x95\x32\x49\xc2\x5c\xdd\xda\x00\xe9\xd2\xaa\xc5\x2b\x31\x41\x71\x0c\x43\x5c\x28\x0c\x47\x40\x28\xa0\x15\x71\xb8\x22\xaf\x6a\x91\x24\x28\x86\x94\x71\x4d\x6f\x5d\xcc\xba\x61\x04\xe7\x0e\x0c\xfa\x67\xc1\xfb\x8e\xef\x80\x3b\x80\x4b\xbf\xff\xce\x3d\x75\x4e\xc1\xec\x0c\xc0\x1d\x98\x35\x78\xef\x06\xe7\xfd\xab\x00\xde\x77\x7c\xbf\xe3\x05\x1f\xa0\x7f\x06\x1d\xef\x03\xfc\xc7\xf5\x4e\x6b\xe0\xfc\x76\xe9\x3b\x83\x01\xf4\x7d\xc3\xbd\xb8\xec\xb9\xce\x69\x0d\x5c\xaf\xdb\xbb\x3a\x75\xbd\xb7\xf0\xe6\x2a\x00\xaf\x1f\x40\xcf\xbd\x70\x03\xe7\x14\x82\x3e\x28\x82\x05\x2a\xd7\x19\x28\x64\x17\x8e\xdf\x3d\xef\x78\x41\xe7\x8d\xdb\x73\x83\x0f\x35\xe3\xcc\x0d\x3c\x85\xf3\xac\xef\x43\x07\x2e\x3b\x7e\xe0\x76\xaf\x7a\x1d\x1f\x2e\xaf\xfc\xcb\xfe\xc0\x81\x8e\x77\x0a\x5e\xdf\x73\xbd\x33\xdf\xf5\xde\x3a\x17\x8e\x17\xd4\xc1\xf5\xc0\xeb\x83\xf3\xce\xf1\x02\x18\x9c\x77\x7a\x3d\x45\xca\xe8\x5c\x05\xe7\x7d\x5f\xf1\x07\xdd\xfe\xe5\x07\xdf\x7d\x7b\x1e\xc0\x79\xbf\x77\xea\xf8\x03\x78\xe3\x40\xcf\xed\xbc\xe9\x39\x39\x29\xef\x03\x74\x7b\x1d\xf7\xa2\x06\xa7\x9d\x8b\xce\x5b\x47\x43\xf5\x83\x73\xc7\x37\xd4\xb4\x9c\x3b\x78\x7f\xee\xa8\x21\x45\xaf\xe3\x41\xa7\x1b\xb8\x7d\x4f\x89\xd1\xed\x7b\x81\xdf\xe9\x06\x35\x08\xfa\x7e\xb0\x00\x7d\xef\x0e\x9c\x1a\x74\x7c\x77\xa0\x14\x72\xe6\xf7\x2f\x6a\x86\x52\x67\xff\x4c\x4d\x71\x3d\x05\xe7\x39\x39\x16\xa5\x6a\x28\x59\xa4\xef\xeb\xe7\xab\x81\xb3\x40\x08\xa7\x4e\xa7\xe7\x7a\x6f\x07\x0a\x58\x89\x38\x9f\x5c\x37\x2c\xeb\xc4\x68\xe9\x14\x78\x9b\xc4\x54\xb4\x2b\x12\xdb\xe1\xd1\xd1\x51\x9e\xcf\xcc\xdd\x26\x09\x95\xdc\xda\xe6\x88\x51\x69\x8d\x50\x42\xe2\x69\x13\x7e\x3a\xc7\xf1\x35\x96\x24\x44\xe0\xe1\x0c\xff\x54\x83\xc5\x40\x0d\x3a\x9c\xa0\xb8\x06\x02\x51\x61\x09\xcc\xc9\xe8\x18\x86\xec\xd6\x12\xe4\x8b\xea\x01\x60\xc8\x78\x84\xb9\x35\x64\xb7\xc7\xa0\x91\x0a\xf2\x05\x37\xe1\xf0\xe7\xf4\xf6\x18\x12\xc4\xc7\x84\x36\xa1\x71\xac\x72\xeb\x04\xa3\xe8\x29\xe9\x27\x58\x22\x50\x2b\xa9\xb6\x79\x4d\xf0\x8d\x8a\x22\x53\x45\xaf\xc4\x54\xb6\xcd\x1b\x12\xc9\x49\x3b\xc2\xd7\x24\xc4\x96\x7e\x78\x3a\x65\x81\x3d\x67\x57\x19\xd3\xc2\x7f\x66\xe4\xba\x6d\x76\x73\x56\xad\x60\x9a\xe2\x15\xc6\x55\x0b\x64\x2b\xe3\x1e\xeb\x4a\x20\xb0\x6c\x5f\x05\x67\xd6\xaf\x4f\xcc\xbe\x5e\xb6\x3d\x9d\xb9\xef\xeb\x45\x5a\xb6\x66\xee\xc4\x30\x5a\xb6\x72\x4a\xf5\x63\xc8\xa2\x29\x10\x89\x13\x11\xb2\x14\xb7\x4d\x53\x3f\xc8\xa9\xfa\x5d\x44\x94\x08\x27\x38\x41\x3a\xa2\x1c\x55\xdd\x2f\xe6\x7d\xdc\xa3\x0a\x69\xdd\xe0\xe1\x67\x22\xad\xfc\x45\xc2\x98\x9c\x68\xa0\xbc\x36\x10\x24\x70\xb4\x9c\xa4\x7c\x43\x43\x5b\x28\xfa\x94\x09\xd9\x04\xca\x28\x3e\x86\x09\x56\x95\xa9\x09\x87\x8d\xc6\xbf\x8e\x21\x26\x14\x5b\x8b\xa1\xfa\x6b\x9c\x1c\x83\x8e\x80\x7c\x02\xfc\x40\x12\x15\x2c\x88\xca\x63\x18\xa2\xf0\xf3\x98\xb3\x8c\x46\x56\xc8\x62\xc6\x9b\xf0\xe3\xe8\xb5\xfa\xbb\xaa\x7e\x48\x51\x14\x69\xae\x94\x37\x0c\xc7\x7a\x66\xdb\x2c\x66\x9a\x4a\xdf\x12\x0d\x1f\xdb\x3d\x56\x44\xda\x51\x8e\x4a\xde\x01\x5a\x92\x3f\x61\x1e\x03\x50\x1c\x3c\x72\x26\xbd\xc6\x5c\x21\x89\x2d\x14\x93\x31\x6d\x82\x64\x69\x59\x51\xd7\xfa\x45\xdb\x94\x2c\x35\x4f\x5a\xb6\x8c\x96\x8c\xe6\x99\xd5\x7c\xdd\x68\x3c\x72\xa8\x54\x32\x1d\x11\x91\xc6\x68\xda\x84\x61\xcc\xc2\xcf\x25\xdf\x4e\xd0\xad\x55\x38\xc9\xeb\x46\x23\xbd\x2d\xbd\x0c\x63\x8c\xb8\x22\x28\x27\xa5\xf1\x6d\x81\xb2\x50\x0e\xa0\x4c\xb2\xb5\x90\x28\x69\x4b\x2b\x0a\xa0\x15\x91\xeb\xc7\x76\xab\xb2\xbc\xeb\xca\xb9\x5f\x88\x39\xdf\xca\xc8\x3a\x98\x0b\x3b\x2b\x4d\x98\x10\xe2\x38\x2e\x66\xb7\xcd\x46\xfe\x2c\x52\x14\xce\x9f\x1f\x55\xd0\xe2\x25\x47\x11\xc9\x44\x13\x5e\xe9\xb1\x8a\x04\x30\x1a\x95\xb2\x58\x0e\xd6\x84\xc3\xf4\x16\x04\x8b\x49\x04\x3f\xe2\x23\xf5\xb7\x9c\x18\x46\xa3\x15\x5d\xec\x43\x76\x58\x72\xf2\x78\x59\xe2\xf5\xd6\x80\x2b\x69\x57\x83\xdc\x14\xa5\xe6\x97\x46\xe3\x18\x74\x89\x2a\xe6\x87\x98\x4a\xcc\xab\xec\xa5\xff\x6b\x68\xa3\x6c\xda\xcd\x79\xfd\xcb\xcb\x97\xdd\xea\x02\xf4\x52\xf9\xb5\x09\x45\xbc\xe5\x04\x56\xad\x97\xc3\x56\x47\xe4\xfc\xcf\x72\xf7\x67\xb1\xed\x03\xfa\x6b\x49\xe5\x37\xac\x03\x38\x84\xd9\x4c\x2c\x3e\x78\xc0\x88\x71\x58\xee\x50\x6c\xd9\x21\x82\xd9\x6c\x8d\x2a\xac\xee\x57\xb4\x4b\xbb\x15\x1b\xd3\x8a\x4f\x2b\x25\xe3\x2f\x72\xf0\xe2\x99\x3f\xbb\xe9\x2e\xc5\x6c\xe9\x3c\x87\xb9\xf3\xdc\xe7\x1b\x7b\x9f\xfb\xb6\xaa\x7d\xbf\x9c\x60\xdf\x5d\xa1\x01\x8d\x79\x2e\xb9\xcf\x1d\x0a\x31\x10\x4c\x38\x1e\xb5\xcd\x5d\x3e\xe0\x3e\xb2\x3f\xcc\x93\xe6\xd9\xd9\x59\x91\x7c\x23\x1c\x32\xae\xbf\xc9\xcd\x97\x07\xa5\x05\xc1\x4b\xb5\x1c\x28\xe5\xed\x21\x8b\xa3\xea\xc4\x1d\x66\x5c\x28\xec\x29\x23\xf9\xc0\xa2\xa1\x20\x54\x23\x2d\xfa\x8a\xb5\x04\xff\x8b\x62\x4c\xe3\xd3\x1f\x51\x47\x8c\x27\x4d\x08\x51\x4a\x24\x8a\xc9\x17\x5c\x99\xf4\x5f\xfd\xfc\x2b\x8e\x50\x45\xbd\xde\x98\x51\x0c\x6b\x2d\x37\xf3\x42\xbe\x18\x5c\x74\x6f\xe9\x6d\x61\xde\x93\x77\x04\xdf\x00\xa1\xf7\x7d\x7c\x9f\x2f\x23\x51\xa5\x0f\xaf\x25\xde\xea\xf4\x9b\xff\xf9\xda\xa6\x4b\x45\x51\x78\x0e\xd9\xbf\x27\x64\x85\xe4\x8c\x8e\x9f\x4e\xb5\xbf\x6f\x3f\x63\xf2\x47\xb1\xe3\xd6\xb2\x73\x26\xbf\x83\xd7\x55\x34\x0c\xc5\x9b\xf9\x41\x8a\xf5\xad\xbb\x67\x3f\xfc\x67\xf8\x61\xde\x9a\x2e\x5c\xad\x35\x7c\x3a\x33\x83\x5d\xad\xa3\xaf\x9c\x20\xda\x7e\xcc\xe7\x89\x85\xd9\x1e\x77\x50\x51\x0b\x96\x9b\xf7\x79\x25\x78\x72\xcf\x58\xe1\x68\x5f\xdc\xe3\xab\x1a\xfd\xea\xb1\xb0\xff\x51\x67\x59\xed\x30\xd7\xcf\xa9\x3d\x51\x43\x39\x6f\xb7\x36\x7a\xca\x8c\x46\x98\xab\xee\xaf\xec\x4e\xf9\x49\x3b\xd5\x44\xed\x5f\x8e\xf9\xb6\x6a\xba\x63\x7b\xb7\x7a\xc6\xa5\xd2\xbc\xcf\x5d\xe1\xde\x54\xe3\xbd\xf3\x4c\x80\xd6\x64\x0f\x79\xda\x3b\x3d\x3d\x24\x82\xef\xeb\x88\x9f\x03\xeb\xff\xb3\xcd\x5d\x5d\x6e\x2d\xce\x0a\x2e\x17\x5c\xf3\xa1\x27\x58\x72\xad\x9e\x5c\x7c\xf6\xc6\x7f\x86\x37\x3e\x2f\xba\x9e\x17\x5d\xcf\x8b\xae\x7d\x77\x96\xe7\x45\xd7\xde\xb4\x6c\xdb\x0c\xd5\xb2\xf5\x7e\xdc\xc9\x03\xb6\x42\x17\x20\xcb\x91\x47\x3f\x89\x51\x3a\x9a\xb4\x72\xd2\x64\x69\xe8\xa3\xa3\xa3\xfb\x36\xb8\xcb\x3b\xbb\x9b\x5b\x92\xfb\xd1\x34\xec\x53\xfb\xf2\x98\xad\xcb\xcb\xad\xad\x4b\xe5\x26\xda\xd7\x4c\xbe\xd2\xdb\xac\x9d\x6b\x28\x9f\xc2\x5a\x4d\x57\xe5\x9b\xb4\x8f\xe7\x10\x2f\x57\xb3\x95\x96\x68\xe7\x54\x85\xa9\x84\xe1\x74\xb7\x7d\xb8\xcd\xdc\xb1\x71\xde\x61\x3d\x33\xb4\xec\x88\x5c\x9f\xe4\xff\x37\xca\x69\x62\xdf\xda\xda\x2d\xc7\xeb\x72\x11\x97\xf9\xab\x65\x0f\x59\x34\x55\x23\x13\x99\xc4\x27\x86\x51\x7d\x55\x37\xcd\xc4\x84\x5d\x63\xfe\x1d\x6e\xaa\x6e\xa0\x2a\xdf\x6d\xfa\x3b\xee\xa1\x7d\x9f\x6b\x68\xbb\xdf\x42\xfb\x7e\x97\xd0\x56\x68\xee\xa0\xc9\xe5\x75\xd3\x87\xdc\x3f\x5b\xc1\x88\x12\xf4\x85\xd1\x8f\x82\x8a\xef\x72\x57\xab\x02\xdd\xb3\xb1\x1f\x62\xec\xff\x06\x00\x00\xff\xff\x3f\x70\x92\xfb\x23\x41\x00\x00")

func templateDefaultTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateDefaultTmpl,
		"template/default.tmpl",
	)
}

func templateDefaultTmpl() (*asset, error) {
	bytes, err := templateDefaultTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/default.tmpl", size: 16675, mode: os.FileMode(420), modTime: time.Unix(1492501074, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/default.tmpl": templateDefaultTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"default.tmpl": &bintree{templateDefaultTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
