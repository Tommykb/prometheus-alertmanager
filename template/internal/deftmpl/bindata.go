// Code generated by go-bindata.
// sources:
// template/default.tmpl
// DO NOT EDIT!

package deftmpl

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateDefaultTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x1b\x7b\x6f\xdb\x36\xfe\x7f\x7d\x8a\xdf\x34\x1c\xd6\x00\x96\xe5\xb4\x5b\xb1\x38\xb6\x0f\xae\xa3\x34\xc2\x39\x72\x20\x2b\xed\x8a\x61\x18\x68\x89\xb6\xd9\x4a\xa4\x46\x52\x79\x2c\xf3\x77\x3f\x90\x92\x1f\xb2\xe5\xd4\x09\xba\xc4\x77\x4b\x82\x36\x12\xc5\xdf\xfb\x49\x91\xba\xbb\x83\x08\x8f\x09\xc5\x60\xfe\xfe\x3b\x8a\x31\x97\x09\xa2\x68\x82\xb9\x09\xb3\x59\x57\xdd\x9f\xe7\xf7\x77\x77\x80\x69\x04\xb3\x99\xb1\x15\xe4\xd2\xef\x2b\xa8\xbb\x3b\xa8\x3b\x37\x12\x73\x8a\xe2\x4b\xbf\x0f\xb3\x99\xfd\xbd\xad\xe7\x89\x7f\x73\x1c\x62\x72\x85\x79\x5b\x4d\xf2\x8b\x9b\x1c\xa6\xc0\x5e\x46\x2f\xb2\xd1\x67\x1c\x4a\x85\xf6\x57\x05\x32\x94\x48\x66\x02\xfe\x02\xc9\x2e\xd3\x74\x0e\x4a\xc6\x80\xff\x58\x3c\x34\xc7\x84\x13\x3a\x51\x30\x4d\x05\xa3\xa5\x10\xf5\x53\x3d\x0a\x7f\x41\x8c\xe9\x2a\xc5\xdf\x40\x4d\x7a\xcf\x59\x96\xf6\xd1\x08\xc7\xa2\x3e\x64\x5c\xe2\xe8\x02\x11\x2e\xea\x1f\x50\x9c\x61\x45\xf0\x33\x23\x14\x4c\x50\x58\x21\x27\x39\x91\xf0\x4a\xe1\xaa\xf7\x58\x92\x30\x9a\x03\x1f\x14\x63\x2b\xf8\x0e\x60\x36\x7b\x75\x77\x07\xd7\x44\x4e\xcb\x93\xeb\x3e\x4e\xd8\x15\x2e\x53\xf7\x50\x82\x45\xa1\xc6\x2a\xea\x0b\xc6\x0f\x16\x57\x5b\x6c\x13\x61\x11\x72\x92\x4a\xc2\xa8\x79\x8f\x8e\x25\xbe\x91\xb9\x1d\x7f\x8f\x89\x90\xc5\x54\x8e\xe8\x04\x43\x1d\x66\xb3\x9c\xaf\xa6\xb1\x1c\xdc\xd4\x93\xd2\x8a\xa5\x15\xa9\xd8\x57\x77\x6d\x58\x08\x50\x30\x96\x13\xef\x52\xca\x24\x52\x3c\x95\x50\xae\x0c\x3f\x0e\xef\x90\x65\x3c\xc4\xcd\xdc\x98\x98\x62\x8e\x24\xe3\xb9\xfb\x19\x15\x8a\x2a\xe9\x40\xc4\x28\xfc\x52\x8f\xf0\x18\x65\xb1\xac\x4b\x22\x63\x5c\x68\x41\xe2\x24\x8d\x91\x2c\xfb\x62\x7d\x9b\xca\xcb\x78\x32\xa1\x42\x20\xa9\x42\x55\x0e\xb4\x1d\xf1\x8d\x51\x1c\x8f\x50\xf8\x65\x03\x5f\x25\xfb\x0a\x29\xfc\x05\x5f\x9b\x18\x13\xfa\x65\x67\x0e\x52\x8e\x95\xb3\x98\xbb\xcd\x5e\xc1\x7f\xaf\x02\x74\xda\xd8\x91\x03\x12\x32\x8a\x13\xf6\x99\xec\xc8\x83\x9a\x9f\xf1\x78\x57\x8e\x37\x84\x2b\xb9\xc9\x94\xa4\xe1\x14\xc9\xa5\x41\x38\x4b\x1e\x6f\xdc\x75\x6c\x09\x16\x02\x4d\x1e\xe0\x78\x25\xde\x12\x24\x39\xb9\xa9\x92\x64\x2b\x26\xe3\xd1\x36\x59\x23\x36\x95\x89\xd6\x70\x0b\xc1\x94\xe3\x71\xdb\xdc\x05\xb1\xd9\x69\x8d\x19\x95\x10\xb2\x98\x71\x0d\xb2\x35\x8b\x73\x1c\x29\x36\x62\xa1\x22\x7e\xc2\x31\xa6\x0b\xae\xcc\x4e\x6b\xd4\xb9\x4f\xc8\x96\x3d\xea\xb4\x6c\x45\xa9\xd3\xb2\x51\x67\x8b\xf6\x52\xc5\x5a\x94\xc9\xdb\x85\x4c\x9b\xb9\xf3\x61\xa9\x60\x13\x63\x18\x13\x4c\xab\x8c\xb2\xa3\xbf\x6c\xc3\xb8\xac\xba\x8f\x33\xe6\x26\x5e\x42\x85\x44\x34\xc4\xa2\x02\xef\x46\xb1\xb8\xc7\x27\x59\x2a\x26\x98\x12\xfc\x78\x17\xbf\x0f\xd9\xa6\x85\x8a\xda\xba\xa5\x94\x54\x16\x53\x63\xad\x94\x97\x7a\x85\x03\x68\x80\x35\x9b\x19\xf9\x20\xe4\x83\xcd\xf5\xb0\xd9\xd4\x48\xb9\xe1\xd0\x44\xac\x15\x89\x2a\xe8\xf9\x58\xb0\xf8\x0a\x47\x6b\x14\xe7\xc3\xbb\xd3\x9c\x43\x6c\x50\xb5\x76\x51\xa9\xd0\x35\xf4\xe1\xde\x54\xb2\xfa\x15\x09\x25\xe3\x2c\x15\x0f\x35\xfb\x7a\xb5\x7a\x88\x13\x6f\x12\x7d\x44\x72\x2e\x89\x81\x13\x44\xe2\xa5\x66\x96\x7d\xe8\x83\x3d\xb7\x8c\x69\x9e\x2c\x8d\xd6\x77\x27\x83\x5e\xf0\xe9\xc2\x01\x35\x04\x17\x97\xef\xfa\x6e\x0f\x4c\xcb\xb6\x3f\xbe\xe9\xd9\xf6\x49\x70\x02\xbf\x9c\x05\xe7\x7d\x38\xac\x37\x20\xe0\x88\x0a\xa2\x7c\x1a\xc5\xb6\xed\x78\x26\x98\x53\x29\xd3\xa6\x6d\x5f\x5f\x5f\xd7\xaf\xdf\xd4\x19\x9f\xd8\x81\x6f\xdf\x28\x5c\x87\x0a\xb8\xb8\xb4\xe4\x0a\x64\x3d\x92\x91\xd9\x31\x5a\xdf\x59\x96\x31\x94\xb7\x31\x06\x44\x23\xd0\x44\x22\xcc\x89\xf2\x1b\xa5\x36\x50\xa8\x45\xd3\xb6\x27\x44\x4e\xb3\x51\x3d\x64\x89\xad\x64\x98\x64\xd4\xd6\xe8\x50\x98\xe3\xb3\xb4\x68\xd6\x5c\x1d\xc2\x30\x8c\x60\x8a\xe1\xdc\x0d\xa0\x4f\x42\x4c\x05\x86\x57\xe7\x6e\x70\x60\x18\x3d\x96\xde\x72\x32\x99\x4a\x78\x15\x1e\xc0\xeb\xc6\xe1\x8f\x70\x9e\x63\x34\x8c\x0b\xcc\x13\x22\x04\x61\x14\x88\x80\x29\xe6\x78\x74\x0b\x13\x8e\xa8\xc4\x51\x0d\xc6\x1c\x63\x60\x63\x08\xa7\x88\x4f\x70\x0d\x24\x03\x44\x6f\x21\xc5\x5c\x30\x0a\x6c\x24\x11\xa1\x2a\xcc\x10\x84\x2c\xbd\x35\xd8\x18\xe4\x94\x08\x10\x6c\x2c\xaf\x11\xcf\x25\x44\x42\xb0\x90\x20\x89\x23\x88\x58\x98\x25\x98\xe6\xf9\x01\xc6\x24\xc6\x02\x5e\xc9\x29\x06\x73\x58\x40\x98\x07\x9a\x48\x84\x51\x6c\x10\x0a\xea\xd9\xfc\x91\x6e\xe1\x59\x26\x81\x63\x21\x39\xd1\x5a\xa8\x01\xa1\x61\x9c\x45\x8a\x87\xf9\xe3\x98\x24\xa4\xa0\xa0\xc0\xb5\xe0\xc2\x90\x0c\x32\x81\x6b\x9a\xcf\x1a\x24\x2c\x22\x63\xf5\x17\x6b\xb1\xd2\x6c\x14\x13\x31\xad\x41\x44\x14\xea\x51\x26\x71\x0d\x84\x1a\xd4\x7a\xac\x29\x39\x6c\xc6\x41\xe0\x38\x36\x42\x96\x12\x2c\x40\xcb\xba\xe4\x4e\xcf\x51\xac\xa7\x4a\xa1\xb2\x50\x91\x50\x23\xd7\x53\x96\x94\x25\x21\xc2\x18\x67\x9c\x12\x31\xc5\x1a\x26\x62\x20\x98\xa6\xa8\xbc\x59\x8d\xa8\xe9\x63\x16\xc7\xec\x5a\x89\x16\x32\x1a\x91\xa2\x6b\xd7\x46\x46\x23\xb5\x72\x09\x17\x76\xa5\x4c\x92\x30\x57\xb7\x36\x40\xba\xb4\x6a\xf1\x48\x4c\x51\x1c\xc3\x08\x17\x0a\xc3\x11\x10\x0a\x68\x45\x1c\xae\xc8\xab\xd2\x23\x09\x8a\x21\x65\x5c\xd3\x5b\x17\xb3\x6e\x18\xc1\x99\x03\xc3\xc1\x69\xf0\xb1\xeb\x3b\xe0\x0e\xe1\xc2\x1f\x7c\x70\x4f\x9c\x13\x30\xbb\x43\x70\x87\x66\x0d\x3e\xba\xc1\xd9\xe0\x32\x80\x8f\x5d\xdf\xef\x7a\xc1\x27\x18\x9c\x42\xd7\xfb\x04\xff\x71\xbd\x93\x1a\x38\xbf\x5c\xf8\xce\x70\x08\x03\xdf\x70\xcf\x2f\xfa\xae\x73\x52\x03\xd7\xeb\xf5\x2f\x4f\x5c\xef\x3d\xbc\xbb\x0c\xc0\x1b\x04\xd0\x77\xcf\xdd\xc0\x39\x81\x60\x00\x8a\x60\x81\xca\x75\x86\x0a\xd9\xb9\xe3\xf7\xce\xba\x5e\xd0\x7d\xe7\xf6\xdd\xe0\x53\xcd\x38\x75\x03\x4f\xe1\x3c\x1d\xf8\xd0\x85\x8b\xae\x1f\xb8\xbd\xcb\x7e\xd7\x87\x8b\x4b\xff\x62\x30\x74\xa0\xeb\x9d\x80\x37\xf0\x5c\xef\xd4\x77\xbd\xf7\xce\xb9\xe3\x05\x75\x70\x3d\xf0\x06\xe0\x7c\x70\xbc\x00\x86\x67\xdd\x7e\x5f\x91\x32\xba\x97\xc1\xd9\xc0\x57\xfc\x41\x6f\x70\xf1\xc9\x77\xdf\x9f\x05\x70\x36\xe8\x9f\x38\xfe\x10\xde\x39\xd0\x77\xbb\xef\xfa\x4e\x4e\xca\xfb\x04\xbd\x7e\xd7\x3d\xaf\xc1\x49\xf7\xbc\xfb\xde\xd1\x50\x83\xe0\xcc\xf1\x0d\x35\x2d\xe7\x0e\x3e\x9e\x39\x6a\x48\xd1\xeb\x7a\xd0\xed\x05\xee\xc0\x53\x62\xf4\x06\x5e\xe0\x77\x7b\x41\x0d\x82\x81\x1f\x2c\x40\x3f\xba\x43\xa7\x06\x5d\xdf\x1d\x2a\x85\x9c\xfa\x83\xf3\x9a\xa1\xd4\x39\x38\x55\x53\x5c\x4f\xc1\x79\x4e\x8e\x45\xa9\x1a\x4a\x16\x19\xf8\xfa\xfe\x72\xe8\x2c\x10\xc2\x89\xd3\xed\xbb\xde\xfb\xa1\x02\x56\x22\xce\x27\xd7\x0d\xcb\xea\x18\x2d\x9d\x02\x6f\x92\x98\x8a\x76\x45\x62\x3b\x3c\x3a\x3a\xca\xf3\x99\xb9\xdb\x24\xa1\x92\x5b\xdb\x54\x6d\x9f\x35\x46\x09\x89\x6f\x9b\xf0\xc3\x19\x8e\xaf\xb0\x24\x21\x02\x0f\x67\xf8\x87\x1a\x2c\x06\x6a\xd0\xe5\x04\xc5\x35\x10\x88\x0a\x4b\x60\x4e\xc6\xc7\x30\x62\x37\x96\x20\x7f\xaa\x92\x0f\x23\xc6\x23\xcc\xad\x11\xbb\x39\x06\x8d\x54\x90\x3f\x71\x13\x0e\x7f\x4c\x6f\x8e\x21\x41\x7c\x42\x68\x13\x1a\xc7\x2a\xb7\x4e\x31\x8a\x9e\x93\x7e\x82\x25\x02\xb5\xec\x6c\x9b\x57\x04\x5f\xab\x28\x32\x55\xf4\x4a\x4c\x65\xdb\xbc\x26\x91\x9c\xb6\x23\x7c\x45\x42\x6c\xe9\x9b\xe7\x53\x16\xd8\x73\x76\x95\x31\x2d\xfc\x47\x46\xae\xda\x66\x2f\x67\xd5\x0a\x6e\x53\xbc\xc2\xb8\xea\x78\x6c\x65\xdc\x63\x5d\x09\x04\x96\xed\xcb\xe0\xd4\xfa\xf9\x99\xd9\xd7\x6b\xdc\xe7\x33\xf7\xfd\x2b\x1f\xcd\x5c\xc7\x30\x5a\xb6\x72\x4a\x75\x31\x62\xd1\x2d\x10\x89\x13\x11\xb2\x14\xb7\x4d\x53\xdf\xc8\x5b\x75\x5d\x44\x94\x08\xa7\x38\x41\x3a\xa2\x1c\x55\xdd\xcf\xe7\xcd\xdb\x93\x0a\x69\x5d\xe3\xd1\x17\x22\xad\xfc\x41\xc2\x98\x9c\x6a\xa0\xbc\x36\x10\x24\x70\xb4\x9c\xa4\x7c\x43\x43\x5b\x28\xfa\x9c\x09\xd9\x04\xca\x28\x3e\x86\x29\x56\x95\xa9\x09\x87\x8d\xc6\xbf\x8e\x21\x26\x14\x5b\x8b\xa1\xfa\x5b\x9c\x1c\x83\x8e\x80\x7c\x02\x7c\x47\x12\x15\x2c\x88\xca\x63\x18\xa1\xf0\xcb\x84\xb3\x8c\x46\x96\x5e\x9f\x36\xe1\xfb\xf1\x5b\xf5\xbb\xaa\x7e\x48\x51\x14\x69\xae\x94\x37\x8c\x26\xc5\x4a\xb6\x98\x69\x2a\x7d\x4b\x34\x7a\x6a\xf7\x58\x11\x69\x47\x39\x2a\x79\x07\x68\x49\xfe\x8c\x79\x0c\x40\x71\xf0\xc4\x99\xf4\x0a\x73\x85\x24\xb6\x50\x4c\x26\xb4\x09\x92\xa5\x65\x45\x5d\xe9\x07\x6d\x53\xb2\xd4\xec\xb4\x6c\x19\x2d\x19\xcd\x33\xab\xf9\xb6\xd1\x78\xe2\x50\xa9\x64\x3a\x22\x22\x8d\xd1\x6d\x13\x46\x31\x0b\xbf\x94\x7c\x3b\x41\x37\x56\xe1\x24\x6f\x1b\x8d\xf4\xa6\xf4\x30\x8c\x31\xe2\x8a\xa0\x9c\x96\xc6\xb7\x05\xca\x42\x39\x80\x32\xc9\xd6\x42\xa2\xa4\x2d\xad\x28\x80\x56\x44\xae\x9e\xda\xad\xca\xf2\xae\x2b\xe7\x7e\x21\xe6\x7c\x2b\x23\xeb\x60\x2e\xec\xac\x34\x61\x42\x88\xe3\xb8\x98\xdd\x36\x1b\xf9\xbd\x48\x51\x38\xbf\x7f\x52\x41\x8b\x87\x1c\x45\x24\x13\x4d\x78\xa3\xc7\x2a\x12\xc0\x78\x5c\xca\x62\x39\x58\x13\x0e\xd3\x1b\x10\x2c\x26\x11\x7c\x8f\x8f\xd4\x6f\x39\x31\x8c\xc7\x2b\xba\xd8\x87\xec\xb0\xe4\xe4\xe9\xb2\xc4\xdb\xad\x01\x57\xd2\xae\x06\xb9\x2e\x4a\xcd\x4f\x8d\xc6\x31\xe8\x12\x55\xcc\x0f\x31\x95\x98\x57\xd9\x4b\xff\x6b\x68\xa3\x6c\xda\xcd\x79\xfb\xd3\xeb\xd7\xbd\xea\x02\xf4\x5a\xf9\xb5\x09\x45\xbc\xe5\x04\x56\xad\x97\xc3\x56\x47\xe4\xfc\x67\xb9\x55\xb6\xd8\x23\x03\xfd\xb6\xa4\xf2\x95\xd5\x01\x1c\xc2\x6c\x26\x16\x2f\x3c\x60\xcc\x38\x2c\xb7\x73\xb6\x6c\xa7\xc1\x6c\xb6\x46\x15\x56\x37\x77\xda\xa5\xad\x9d\x8d\x69\xc5\xab\x95\x92\xf1\x17\x39\x78\x71\xcf\x5f\xdc\x74\x97\x62\xb6\x74\x9e\xc3\xdc\x79\xee\xf3\x8d\xbd\xcf\x7d\x5b\xd5\xbe\x5f\x4e\xb0\xef\xae\xd0\x80\xc6\x3c\x97\xdc\xe7\x0e\x85\x18\x0f\xda\xee\x79\x5a\x89\xe7\x49\xf3\xf4\xf4\xb4\x48\xbe\x11\x0e\x19\xd7\xef\xe4\xe6\xcb\x83\xd2\x82\xe0\xb5\x5a\x0e\x94\xf2\xf6\x88\xc5\x51\x75\xe2\x0e\x33\x2e\x14\xf6\x94\x91\x7c\x60\xd1\x50\x10\xaa\x91\x16\x7d\xc5\x5a\x82\xff\x49\x31\xa6\xf1\xe9\x97\xa8\x63\xc6\x93\x26\x84\x28\x25\x12\xc5\xe4\x4f\x5c\x99\xf4\xdf\xfc\xf8\x33\x8e\x50\x45\xbd\xde\x98\x51\x0c\x6b\x2d\x37\xf3\x42\xbe\x18\x5c\x74\x6f\xe9\x4d\x61\xde\xce\x07\x82\xaf\x81\xd0\xfb\xde\xb8\xcf\x97\x91\xa8\xd2\x87\xd7\x12\x6f\x75\xfa\xcd\x7f\xbe\xb6\xc7\x52\x51\x14\x5e\x42\xf6\xef\x09\x59\x21\x39\xa3\x93\xe7\x53\xed\xaf\xdb\x0f\xe4\xfc\x56\x6c\xb0\xb5\xec\x9c\xc9\x6f\xe0\x75\x15\x0d\x43\xf1\x64\x7e\xea\x64\x7d\xa7\xee\xc5\x0f\xff\x19\x7e\x98\xb7\xa6\x0b\x57\x6b\x8d\x9e\xcf\xcc\x60\x57\xeb\xe8\x2b\xc7\xad\xb6\x9f\x89\x7a\x66\x61\xb6\xc7\x1d\x54\xd4\x82\xe5\x5e\x7d\x5e\x09\x9e\xdd\x33\x56\x38\xda\x17\xf7\xf8\xaa\x46\xbf\x7a\x86\xee\x7f\xd4\x59\x56\x3b\xcc\xf5\x43\x7d\xcf\xd4\x50\xce\xdb\xad\x8d\x9e\x32\xa3\x11\xe6\xaa\xfb\x2b\xbb\x53\x7e\x2c\x51\x35\x51\xfb\x97\x63\x1e\x57\x4d\x77\x6c\xef\x56\x8f\xb4\x54\x9a\xf7\xa5\x2b\xdc\x9b\x6a\xbc\x77\x9e\x09\xd0\x9a\xee\x21\x4f\x7b\xa7\xa7\x87\x44\xf0\x7d\x1d\xf1\x4b\x60\xfd\x7f\xb6\xb9\xab\xcb\xad\xc5\xd1\xc0\xe5\x82\x6b\x3e\xf4\x0c\x4b\xae\xd5\x83\x8a\x2f\xde\xf8\xcf\xf0\xc6\x97\x45\xd7\xcb\xa2\xeb\x65\xd1\xb5\xef\xce\xf2\xb2\xe8\xda\x9b\x96\x6d\x9b\xa1\x5a\xb6\xde\x8f\xeb\x3c\x60\x2b\x74\x01\xb2\x1c\x79\xf2\x93\x18\xa5\xa3\x49\x2b\x27\x4d\x96\x86\x3e\x3a\x3a\xba\x6f\x83\xbb\xbc\xb3\xbb\xb9\x25\xb9\x1f\x4d\xc3\x3e\xb5\x2f\x4f\xd9\xba\xbc\xde\xda\xba\x54\x6e\xa2\x7d\xcd\xe4\x2b\xbd\xcd\xda\xb9\x86\xf2\x29\xac\xd5\x74\x55\xfe\xec\xf8\xe9\x1c\xe2\xf5\x6a\xb6\xd2\x12\xed\x9c\xaa\x30\x95\x30\xba\xdd\x6d\x1f\x6e\x33\x77\x6c\x9c\x77\x58\xcf\x0c\x2d\x3b\x22\x57\x9d\xfc\x7f\xa3\x9c\x26\xf6\xad\xad\xdd\x72\xbc\x2e\x17\x71\x99\xbf\x5a\xf6\x88\x45\xb7\x6a\x64\x2a\x93\xb8\x63\x18\xd5\xdf\x35\xa7\x99\x98\xb2\x2b\xcc\xbf\xc1\x67\xbd\x1b\xa8\xca\x1f\x34\xfd\x1d\x9f\x9d\x7d\x9b\xaf\xce\x76\xff\xe8\xec\xdb\x7d\x73\xb6\x42\x73\x07\x4d\x2e\xbf\xcd\x7d\xc0\x77\x5f\xff\x0d\x00\x00\xff\xff\x73\x49\xcc\x0c\xb4\x40\x00\x00")

func templateDefaultTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateDefaultTmpl,
		"template/default.tmpl",
	)
}

func templateDefaultTmpl() (*asset, error) {
	bytes, err := templateDefaultTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/default.tmpl", size: 16564, mode: os.FileMode(420), modTime: time.Unix(1484071147, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/default.tmpl": templateDefaultTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"default.tmpl": &bintree{templateDefaultTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
