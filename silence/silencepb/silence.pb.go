// Code generated by protoc-gen-go.
// source: silence.proto
// DO NOT EDIT!

/*
Package silencepb is a generated protocol buffer package.

It is generated from these files:
	silence.proto

It has these top-level messages:
	Matcher
	Comment
	Silence
	MeshSilence
*/
package silencepb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Type specifies how the given name and pattern are matched
// against a label set.
type Matcher_Type int32

const (
	Matcher_EQUAL  Matcher_Type = 0
	Matcher_REGEXP Matcher_Type = 1
)

var Matcher_Type_name = map[int32]string{
	0: "EQUAL",
	1: "REGEXP",
}
var Matcher_Type_value = map[string]int32{
	"EQUAL":  0,
	"REGEXP": 1,
}

func (x Matcher_Type) String() string {
	return proto.EnumName(Matcher_Type_name, int32(x))
}
func (Matcher_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

// Matcher specifies a rule, which can match or set of labels or not.
type Matcher struct {
	Type Matcher_Type `protobuf:"varint,1,opt,name=type,enum=silencepb.Matcher_Type" json:"type,omitempty"`
	// The label name in a label set to against which the matcher
	// checks the pattern.
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// The pattern being checked according to the matcher's type.
	Pattern string `protobuf:"bytes,3,opt,name=pattern" json:"pattern,omitempty"`
}

func (m *Matcher) Reset()                    { *m = Matcher{} }
func (m *Matcher) String() string            { return proto.CompactTextString(m) }
func (*Matcher) ProtoMessage()               {}
func (*Matcher) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Matcher) GetType() Matcher_Type {
	if m != nil {
		return m.Type
	}
	return Matcher_EQUAL
}

func (m *Matcher) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Matcher) GetPattern() string {
	if m != nil {
		return m.Pattern
	}
	return ""
}

// A comment can be attached to a silence.
type Comment struct {
	Author    string                     `protobuf:"bytes,1,opt,name=author" json:"author,omitempty"`
	Comment   string                     `protobuf:"bytes,2,opt,name=comment" json:"comment,omitempty"`
	Timestamp *google_protobuf.Timestamp `protobuf:"bytes,3,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (m *Comment) Reset()                    { *m = Comment{} }
func (m *Comment) String() string            { return proto.CompactTextString(m) }
func (*Comment) ProtoMessage()               {}
func (*Comment) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Comment) GetAuthor() string {
	if m != nil {
		return m.Author
	}
	return ""
}

func (m *Comment) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

func (m *Comment) GetTimestamp() *google_protobuf.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

// Silence specifies an object that ignores alerts based
// on a set of matchers during a given time frame.
type Silence struct {
	// A globally unique identifier.
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// A set of matchers all of which have to be true for a silence
	// to affect a given label set.
	Matchers []*Matcher `protobuf:"bytes,2,rep,name=matchers" json:"matchers,omitempty"`
	// The time range during which the silence is active.
	StartsAt *google_protobuf.Timestamp `protobuf:"bytes,3,opt,name=starts_at,json=startsAt" json:"starts_at,omitempty"`
	EndsAt   *google_protobuf.Timestamp `protobuf:"bytes,4,opt,name=ends_at,json=endsAt" json:"ends_at,omitempty"`
	// The last motification made to the silence.
	UpdatedAt *google_protobuf.Timestamp `protobuf:"bytes,5,opt,name=updated_at,json=updatedAt" json:"updated_at,omitempty"`
	// A set of comments made on the silence.
	Comments []*Comment `protobuf:"bytes,7,rep,name=comments" json:"comments,omitempty"`
}

func (m *Silence) Reset()                    { *m = Silence{} }
func (m *Silence) String() string            { return proto.CompactTextString(m) }
func (*Silence) ProtoMessage()               {}
func (*Silence) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Silence) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Silence) GetMatchers() []*Matcher {
	if m != nil {
		return m.Matchers
	}
	return nil
}

func (m *Silence) GetStartsAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.StartsAt
	}
	return nil
}

func (m *Silence) GetEndsAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.EndsAt
	}
	return nil
}

func (m *Silence) GetUpdatedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *Silence) GetComments() []*Comment {
	if m != nil {
		return m.Comments
	}
	return nil
}

// MeshSilence wraps a regular silence with an expiration timestamp
// after which the silence may be garbage collected.
type MeshSilence struct {
	Silence   *Silence                   `protobuf:"bytes,1,opt,name=silence" json:"silence,omitempty"`
	ExpiresAt *google_protobuf.Timestamp `protobuf:"bytes,2,opt,name=expires_at,json=expiresAt" json:"expires_at,omitempty"`
}

func (m *MeshSilence) Reset()                    { *m = MeshSilence{} }
func (m *MeshSilence) String() string            { return proto.CompactTextString(m) }
func (*MeshSilence) ProtoMessage()               {}
func (*MeshSilence) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *MeshSilence) GetSilence() *Silence {
	if m != nil {
		return m.Silence
	}
	return nil
}

func (m *MeshSilence) GetExpiresAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.ExpiresAt
	}
	return nil
}

func init() {
	proto.RegisterType((*Matcher)(nil), "silencepb.Matcher")
	proto.RegisterType((*Comment)(nil), "silencepb.Comment")
	proto.RegisterType((*Silence)(nil), "silencepb.Silence")
	proto.RegisterType((*MeshSilence)(nil), "silencepb.MeshSilence")
	proto.RegisterEnum("silencepb.Matcher_Type", Matcher_Type_name, Matcher_Type_value)
}

func init() { proto.RegisterFile("silence.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 372 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0xc1, 0x6a, 0xdb, 0x40,
	0x10, 0x86, 0x2b, 0x59, 0x96, 0xac, 0x31, 0x35, 0x66, 0x0f, 0xad, 0x30, 0x94, 0x1a, 0x9d, 0x0c,
	0x2d, 0x6b, 0xb0, 0x0f, 0x6d, 0x8f, 0xa2, 0x98, 0x5e, 0x6a, 0x48, 0x36, 0x0e, 0xe4, 0x16, 0xd6,
	0xd6, 0xc4, 0x16, 0x58, 0xd2, 0x22, 0x8d, 0x42, 0x7c, 0xce, 0x9b, 0xe4, 0x49, 0x83, 0x56, 0x2b,
	0x85, 0xe0, 0x83, 0x73, 0xd3, 0x68, 0xbf, 0x7f, 0x67, 0xbe, 0x59, 0xf8, 0x5c, 0x26, 0x47, 0xcc,
	0x76, 0xc8, 0x55, 0x91, 0x53, 0xce, 0x7c, 0x53, 0xaa, 0xed, 0xe4, 0xfb, 0x3e, 0xcf, 0xf7, 0x47,
	0x9c, 0xeb, 0x83, 0x6d, 0xf5, 0x30, 0xa7, 0x24, 0xc5, 0x92, 0x64, 0xaa, 0x1a, 0x36, 0x7c, 0xb6,
	0xc0, 0x5b, 0x4b, 0xda, 0x1d, 0xb0, 0x60, 0x3f, 0xc0, 0xa1, 0x93, 0xc2, 0xc0, 0x9a, 0x5a, 0xb3,
	0xd1, 0xe2, 0x2b, 0xef, 0xae, 0xe1, 0x86, 0xe0, 0x9b, 0x93, 0x42, 0xa1, 0x21, 0xc6, 0xc0, 0xc9,
	0x64, 0x8a, 0x81, 0x3d, 0xb5, 0x66, 0xbe, 0xd0, 0xdf, 0x2c, 0x00, 0x4f, 0x49, 0x22, 0x2c, 0xb2,
	0xa0, 0xa7, 0x7f, 0xb7, 0x65, 0xf8, 0x0d, 0x9c, 0x3a, 0xcb, 0x7c, 0xe8, 0xaf, 0xae, 0x6f, 0xa3,
	0xff, 0xe3, 0x4f, 0x0c, 0xc0, 0x15, 0xab, 0x7f, 0xab, 0xbb, 0xab, 0xb1, 0x15, 0x56, 0xe0, 0xfd,
	0xcd, 0xd3, 0x14, 0x33, 0x62, 0x5f, 0xc0, 0x95, 0x15, 0x1d, 0xf2, 0x42, 0x8f, 0xe1, 0x0b, 0x53,
	0xd5, 0x77, 0xef, 0x1a, 0xc4, 0xb4, 0x6c, 0x4b, 0xf6, 0x1b, 0xfc, 0xce, 0x4a, 0xf7, 0x1d, 0x2e,
	0x26, 0xbc, 0xf1, 0xe6, 0xad, 0x37, 0xdf, 0xb4, 0x84, 0x78, 0x83, 0xc3, 0x17, 0x1b, 0xbc, 0x9b,
	0x46, 0x92, 0x8d, 0xc0, 0x4e, 0x62, 0xd3, 0xd3, 0x4e, 0x62, 0xc6, 0x61, 0x90, 0x36, 0xd6, 0x65,
	0x60, 0x4f, 0x7b, 0xb3, 0xe1, 0x82, 0x9d, 0x2f, 0x44, 0x74, 0x0c, 0xfb, 0x05, 0x7e, 0x49, 0xb2,
	0xa0, 0xf2, 0x5e, 0xd2, 0x07, 0xa6, 0x18, 0x34, 0x70, 0x44, 0x6c, 0x09, 0x1e, 0x66, 0xb1, 0x8e,
	0x39, 0x17, 0x63, 0x6e, 0x8d, 0x46, 0xc4, 0xfe, 0x00, 0x54, 0x2a, 0x96, 0x84, 0x71, 0x9d, 0xeb,
	0x5f, 0x96, 0x36, 0x74, 0x44, 0xb5, 0x98, 0xd9, 0x5c, 0x19, 0x78, 0x67, 0x62, 0xe6, 0x19, 0x44,
	0xc7, 0x84, 0x8f, 0x30, 0x5c, 0x63, 0x79, 0x68, 0xf7, 0xf4, 0x13, 0x3c, 0x43, 0xeb, 0x65, 0xbd,
	0x4f, 0x1b, 0x48, 0xb4, 0x48, 0x3d, 0x27, 0x3e, 0xa9, 0xa4, 0x40, 0xed, 0x67, 0x5f, 0x9e, 0xd3,
	0xd0, 0x11, 0x6d, 0x5d, 0x7d, 0xbc, 0x7c, 0x0d, 0x00, 0x00, 0xff, 0xff, 0xd7, 0x1a, 0x8f, 0x20,
	0xdd, 0x02, 0x00, 0x00,
}
