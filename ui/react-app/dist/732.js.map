{"version":3,"file":"732.js","mappings":"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","sources":["webpack://@prometheus-io/alertmanager/./src/utils/url-builder.ts","webpack://@prometheus-io/alertmanager/./src/utils/fetch.ts","webpack://@prometheus-io/alertmanager/./src/client/am-client.ts","webpack://@prometheus-io/alertmanager/./src/views/ViewStatus.tsx"],"sourcesContent":["const API_PREFIX = '/api/v2';\n\nexport type URLParams = {\n  resource: string;\n  queryParams?: URLSearchParams;\n  apiPrefix?: string;\n};\n\nexport default function buildURL({ apiPrefix = API_PREFIX, resource, queryParams }: URLParams): string {\n  let url = `${apiPrefix}/${resource}`;\n  if (queryParams !== undefined) {\n    url = `${url}?${queryParams.toString()}`;\n  }\n  return url;\n}\n","/**\n * Calls `global.fetch`, but throws a `FetchError` for non-200 responses.\n */\nexport async function fetch(...args: Parameters<typeof global.fetch>) {\n  const response = await global.fetch(...args);\n  if (!response.ok) {\n    throw new FetchError(response);\n  }\n  return response;\n}\n\n/**\n * Calls `global.fetch` and throws a `FetchError` on non-200 responses, but also\n * decodes the response body as JSON, casting it to type `T`. Returns the\n * decoded body.\n */\nexport async function fetchJson<T>(...args: Parameters<typeof global.fetch>) {\n  const response = await fetch(...args);\n  const json: T = await response.json();\n  return json;\n}\n\n/**\n * Error thrown when fetch returns a non-200 response.\n */\nexport class FetchError extends Error {\n  constructor(readonly response: Response) {\n    super(`${response.status} ${response.statusText}`);\n    Object.setPrototypeOf(this, FetchError.prototype);\n  }\n}\n","import { useQuery } from '@tanstack/react-query';\nimport buildURL from '../utils/url-builder';\nimport { fetchJson } from '../utils/fetch';\n\nconst resource = 'status';\n\nexport interface AMStatusClusterPeersInfo {\n  address: string;\n  name: string;\n}\n\nexport interface AMStatusClusterInfo {\n  name: string;\n  peers: AMStatusClusterPeersInfo[];\n  status: string;\n}\n\nexport interface AMStatusVersionInfo {\n  branch: string;\n  buildDate: string;\n  buildUser: string;\n  goVersion: string;\n  revision: string;\n  version: string;\n}\n\nexport interface AMStatus {\n  cluster: AMStatusClusterInfo;\n  uptime: string;\n  versionInfo: AMStatusVersionInfo;\n  config: {\n    original: string;\n  };\n}\n\nexport function useAMStatus() {\n  return useQuery<AMStatus, Error>([], () => {\n    const url = buildURL({ resource: resource });\n    return fetchJson<AMStatus>(url);\n  });\n}\n","import {\n  Chip,\n  Container,\n  List,\n  ListItem,\n  SxProps,\n  Table,\n  TableCell,\n  tableCellClasses,\n  TableContainer,\n  TableRow,\n  TextareaAutosize,\n  Theme,\n  Typography,\n} from '@mui/material';\nimport { useAMStatus } from '../client/am-client';\n\nconst tableStyle: SxProps<Theme> = {\n  [`& .${tableCellClasses.root}`]: {\n    borderBottom: 'none',\n  },\n};\n\nconst tableHeaderStyle: SxProps<Theme> = {\n  fontWeight: 'bold',\n};\n\ninterface tableCellProperties {\n  header: string;\n  content: string;\n}\n\nfunction CustomTableCell(props: tableCellProperties) {\n  const { header, content } = props;\n  return (\n    <TableRow>\n      <TableCell variant=\"head\" sx={tableHeaderStyle}>\n        {header}\n      </TableCell>\n      <TableCell>{content}</TableCell>\n    </TableRow>\n  );\n}\n\nexport default function ViewStatus() {\n  const { data } = useAMStatus();\n  if (data === undefined || data === null) {\n    return null;\n  }\n\n  return (\n    <Container maxWidth=\"md\">\n      <Typography variant=\"h4\">Status</Typography>\n      <TableContainer>\n        <Table size=\"small\" sx={tableStyle}>\n          <CustomTableCell header=\"Uptime\" content={data.uptime} />\n        </Table>\n      </TableContainer>\n      <Typography variant=\"h4\">Cluster Status</Typography>\n      <Table size=\"small\" sx={tableStyle}>\n        <CustomTableCell header=\"Name\" content={data.cluster.name} />\n        <TableRow>\n          <TableCell variant=\"head\" sx={tableHeaderStyle}>\n            Status\n          </TableCell>\n          <TableCell>\n            <Chip color={data.cluster.status === 'ready' ? 'success' : 'error'} label={data.cluster.status} />\n          </TableCell>\n        </TableRow>\n        <TableRow>\n          <TableCell variant=\"head\" sx={tableHeaderStyle}>\n            Peers\n          </TableCell>\n          <TableCell>\n            <List>\n              {data.cluster.peers.map((peer, i) => {\n                return (\n                  <ListItem disablePadding sx={{ display: 'list-item' }} key={i}>\n                    <p>\n                      Name: {peer.name}\n                      <br />\n                      Address: {peer.address}\n                    </p>\n                  </ListItem>\n                );\n              })}\n            </List>\n          </TableCell>\n        </TableRow>\n      </Table>\n      <Typography variant=\"h4\">Version Information</Typography>\n      <TableContainer>\n        <Table size=\"small\" sx={tableStyle}>\n          <CustomTableCell header=\"Branch\" content={data.versionInfo.branch} />\n          <CustomTableCell header=\"Build Date\" content={data.versionInfo.buildDate} />\n          <CustomTableCell header=\"Build User\" content={data.versionInfo.buildUser} />\n          <CustomTableCell header=\"Go Version\" content={data.versionInfo.goVersion} />\n          <CustomTableCell header=\"Revision\" content={data.versionInfo.revision} />\n          <CustomTableCell header=\"Version\" content={data.versionInfo.version} />\n        </Table>\n      </TableContainer>\n      <Typography variant=\"h4\">Config</Typography>\n      <TextareaAutosize\n        readOnly\n        aria-multiline\n        value={data.config.original}\n        style={{ width: '100%', backgroundColor: 'lightgrey' }}\n      />\n    </Container>\n  );\n}\n"],"names":["API_PREFIX","buildURL","apiPrefix","resource","queryParams","url","fetch","args","response","FetchError","fetchJson","useAMStatus","useQuery","tableStyle","tableCellClasses","tableHeaderStyle","CustomTableCell","props","header","content","TableRow","TableCell","ViewStatus","data","Container","Typography","TableContainer","Table","Chip","List","peer","i","ListItem","TextareaAutosize"],"sourceRoot":""}