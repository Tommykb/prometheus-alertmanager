{-
   Alertmanager API
   API of the Prometheus Alertmanager (https://github.com/prometheus/alertmanager)

   OpenAPI spec version: 0.0.1

   NOTE: This file is auto generated by the openapi-generator.
   https://github.com/openapitools/openapi-generator.git
   Do not edit this file manually.
-}


module Data.Silence exposing (Silence, decoder, encoder)

import Data.Matchers as Matchers exposing (Matchers)
import Data.SilenceStatus as SilenceStatus exposing (SilenceStatus)
import DateTime exposing (DateTime)
import Dict exposing (Dict)
import Json.Decode as Decode exposing (Decoder)
import Json.Decode.Pipeline exposing (optional, required)
import Json.Encode as Encode


type alias Silence =
    { id : Maybe String
    , matchers : Matchers
    , startsAt : DateTime
    , endsAt : DateTime
    , updatedAt : Maybe DateTime
    , createdBy : String
    , comment : String
    , status : Maybe SilenceStatus
    }


decoder : Decoder Silence
decoder =
    Decode.succeed Silence
        |> optional "id" (Decode.nullable Decode.string) Nothing
        |> required "matchers" Matchers.decoder
        |> required "startsAt" DateTime.decoder
        |> required "endsAt" DateTime.decoder
        |> optional "updatedAt" (Decode.nullable DateTime.decoder) Nothing
        |> required "createdBy" Decode.string
        |> required "comment" Decode.string
        |> optional "status" (Decode.nullable SilenceStatus.decoder) Nothing


encoder : Silence -> Encode.Value
encoder model =
    Encode.object
        [ ( "id", Maybe.withDefault Encode.null (Maybe.map Encode.string model.id) )
        , ( "matchers", Matchers.encoder model.matchers )
        , ( "startsAt", DateTime.encoder model.startsAt )
        , ( "endsAt", DateTime.encoder model.endsAt )
        , ( "updatedAt", Maybe.withDefault Encode.null (Maybe.map DateTime.encoder model.updatedAt) )
        , ( "createdBy", Encode.string model.createdBy )
        , ( "comment", Encode.string model.comment )
        , ( "status", Maybe.withDefault Encode.null (Maybe.map SilenceStatus.encoder model.status) )
        ]
