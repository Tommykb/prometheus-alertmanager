---
version: 2.1

orbs:
  prometheus: prometheus/prometheus@0.1.0
  go: circleci/go@0.2.0
  aws-ecr: circleci/aws-ecr@3.1.0

jobs:
  test_frontend:
    # We need to use a machine executor because the front-end validation runs
    # containers with mounted volumes which isn't supported with the docker
    # executor (even with setup_remote_docker).
    machine: true
    steps:
    - checkout
    - run: sudo service docker restart
    - run:
        name: Remove existing Go installation
        command: sudo rm -rf /usr/local/go
    # Whenever the Go version is updated here, .promu.yml should also be updated.
    - go/install:
        version: "1.13"
    - run:
        name: Remove generated code
        command: make clean
    - run:
        name: Generate front-end code
        command: make all
        working_directory: ~/project/ui/app
    - run:
        name: Generate assets
        command: make assets
    - run:
        name: Generate API v2 code
        command: make apiv2
    - run: git diff --exit-code

  test:
    docker:
    # Whenever the Go version is updated here, .promu.yml should also be updated.
    - image: circleci/golang:1.13
    # maildev containers are for running the email tests against a "real" SMTP server.
    # See notify/email_test.go for details.
    - image: djfarrelly/maildev@sha256:624e0ec781e11c3531da83d9448f5861f258ee008c1b2da63b3248bfd680acfa
      name: maildev-noauth
      entrypoint: bin/maildev
      command:
      - -v
    - image: djfarrelly/maildev@sha256:624e0ec781e11c3531da83d9448f5861f258ee008c1b2da63b3248bfd680acfa
      name: maildev-auth
      entrypoint: bin/maildev
      command:
      - -v
      - --incoming-user
      - user
      - --incoming-pass
      - pass

    environment:
      EMAIL_NO_AUTH_CONFIG: /tmp/smtp_no_auth.yml
      EMAIL_AUTH_CONFIG: /tmp/smtp_auth.yml

    steps:
    - prometheus/setup_environment
    - go/load-cache:
        key: v1-go-mod
    - run:
        command: |
          cat \<<EOF > $EMAIL_NO_AUTH_CONFIG
          smarthost: maildev-noauth:1025
          server: http://maildev-noauth:1080/
          EOF
          cat \<<EOF > $EMAIL_AUTH_CONFIG
          smarthost: maildev-auth:1025
          server: http://maildev-auth:1080/
          username: user
          password: pass
          EOF
    - run:
        command: make
        environment:
          # By default Go uses GOMAXPROCS but a Circle CI executor has many
          # cores (> 30) while the CPU and RAM resources are throttled. If we
          # don't limit this to the number of allocated cores, the job is
          # likely to get OOMed and killed.
          GOOPTS: "-p 2"
    - prometheus/check_proto
    - prometheus/store_artifact:
        file: alertmanager
    - prometheus/store_artifact:
        file: amtool
    - go/save-cache:
        key: v1-go-mod

  Build_Docker:
    machine: true
    description: Build and push a Docker image to AWS ECR
    parameters:
      image:
        description: The name of the container image to build.
        type: string
      dockerfile:
        description: The path to the Dockerfile to use.
        type: string

    steps:
      - checkout
      - run:
          name: Set up environment variables for Non-Prod AWS
          command: |
            echo '
              export AWS_REGION=$AWS_REGION
              export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID_NONPROD
              export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY_NONPROD
              export CONTAINER_REGISTRY=$CONTAINER_REGISTRY
              export IMAGE_TAG='$(grep -oP "(?<=IMAGE_TAG=).+" VERSION.env)'
            ' >> $BASH_ENV

      - aws-ecr/ecr-login:
          region: AWS_REGION

      - run:
          name: Create the `<< parameters.image >>` AWS ECR repository (if not exists)
          command: |
            aws ecr describe-repositories \
              --region $AWS_REGION \
              --repository-names << parameters.image >> \
                > /dev/null 2>&1 || \
            aws ecr create-repository \
              --region $AWS_REGION \
              --repository-name << parameters.image >> && \
            echo OK!

      - run:
          name: Build the `<< parameters.image >>` Docker image
          command: |
            docker build \
              --tag << parameters.image >> \
              --file << parameters.dockerfile >> \
              .

      - run:
          name: Push `<< parameters.image >>` to AWS ECR (Non-Prod)
          command: |
            docker tag << parameters.image >> $CONTAINER_REGISTRY/<< parameters.image >>:$IMAGE_TAG && \
            docker tag << parameters.image >> $CONTAINER_REGISTRY/<< parameters.image >>:$(git rev-parse --short=8 HEAD) && \
            docker push $CONTAINER_REGISTRY/<< parameters.image >>:$IMAGE_TAG && \
            docker push $CONTAINER_REGISTRY/<< parameters.image >>:$(git rev-parse --short=8 HEAD) && \
            echo Pushed tags: latest, $(git rev-parse --short=8 HEAD), $IMAGE_TAG



workflows:
  version: 2
  alertmanager:
    jobs:
    - test_frontend
    - test
    - prometheus/build:
        name: build
    - Build_Docker:
        name: build_and_push_docker_image
        dockerfile: ./Dockerfile
        image: avengers/prometheus/alert-manager
        requires:
        - test_frontend
        - test
        - build
        filters:
          branches:
            only: master
